version "3.6"

#include "zscript/marisa/helpers.zsc"
#include "zscript/marisa/handler.zsc"
#include "zscript/marisa/hud.zsc"
#include "zscript/marisa/dialogueseq.zsc"
#include "zscript/marisa/mapstuff.zsc"
#include "zscript/marisa/seacat.zsc"
#include "zscript/marisa/nightmarelord.zsc"
#include "zscript/marisa/reggie.zsc"
#include "zscript/marisa/dotflow.zsc"

#include "zscript/pixeleater/phead.zsc"
#include "zscript/pixeleater/thewarden.zsc"

#include "zscript/jaxx/blackcat.txt"
#include "zscript/jaxx/metalspike.txt"
#include "zscript/jaxx/cauldron.txt"
#include "zscript/jaxx/canada.txt"
#include "zscript/jaxx/BigHallowTree.txt"
#include "zscript/jaxx/misc.txt"
#include "zscript/jaxx/fire.txt"
#include "zscript/jaxx/bluefire.txt"
#include "zscript/jaxx/greenfire.txt"
#include "zscript/jaxx/purplefire.txt"

#include "zscript/zrrion/zrrion_stuff.txt"

class WaterHandler : StaticEventHandler {
	override void RenderOverlay(RenderEvent e) {
		if ( level.levelnum != 10 ) return;
		// set the player's timer up correctly (more-than-1-tick precision)
		PlayerInfo p = players[consoleplayer];
		Shader.SetUniform1f(p, "watershader", "timer", gametic + e.FracTic);

		if (p.mo.waterlevel >= 3) {
			Shader.SetEnabled(p, "watershader", true);
			Shader.SetEnabled(p, "waterzoomshader", true);
			double effectSize = 0.01;
			Shader.SetUniform1f(p, "watershader", "waterFactor", effectSize);
			Shader.SetUniform1f(p, "waterzoomshader", "zoomFactor", 1 - (effectSize * 2));
		}
		else {
			Shader.SetEnabled(p, "watershader", false);
			Shader.SetEnabled(p, "waterzoomshader", false);
		}
	}
}

// for SPOOK09
Class PowerScuba : Powerup
{
	Default
	{
		Powerup.Duration -120;
		Powerup.Color "40 40 ff",  0.2;
	}

	override void AbsorbDamage( int damage, Name damageType, out int newdamage )
	{
		if ( damageType == 'Drowning' ) newdamage = 0;
	}

	override void Tick()
	{
		// Powerups cannot exist outside an inventory
		if ( !Owner )
		{
			Destroy();
			return;
		}
		if ( Owner.waterlevel > 2 ) EffectTics--;
		if ( EffectTics <= 0 ) Destroy();
	}

	override Color GetBlend()
	{
		if ( Owner && (Owner.waterlevel <= 2) ) return 0;
		return Super.GetBlend();
	}
	override bool isBlinking()
	{
		return (EffectTics <= BLINKTHRESHOLD && (level.time&8) && !bNoScreenBlink);
	}
	override void DoEffect()
	{
		if ( Owner.player ) Owner.player.mo.ResetAirSupply();
		if ( (Owner.waterlevel > 2) && !(level.time&0x3f) )
			Owner.A_PlaySound("misc/mask",CHAN_AUTO);
	}
}
