class MapShader : EventHandler
{
	PlayerInfo p ;

	override void WorldLoaded( WorldEvent e )
	{
		p = players[ consoleplayer ];

		if( p )
		{
			if( level.mapname ~== "SPOOK03" )
			{
				Shader.SetEnabled( p, "Screemish", true );
			}
			else Shader.SetEnabled( p, "Screemish", false );
		}
		else Shader.SetEnabled( p, "Screemish", false );
	}

	override void WorldUnloaded( WorldEvent e )
	{
		Shader.SetEnabled( p, "Screemish", false );
	}
}

class Scyth : Fist
{
	const BLADERANGE = ( 1.5 * DEFMELEERANGE );

	Default
	{
		Obituary "You were harvested by the Reaper's red thumb" ;
		Tag "Scyth" ;
		Weapon.SlotNumber 1;
		+WEAPON.CHEATNOTWEAPON;
	}
	States
	{
	Ready:
		SCYT AG 10 A_WeaponReady;
		Loop;
	Deselect:
		SCYT A 1 A_Lower;
		Loop;
	Select:
		SCYT A 1 A_Raise;
		Loop;
	Fire:
		SCYT B 4 A_PlaySound( "skeleton/swing", CHAN_WEAPON );
		SCYT C 4 A_Trim ;
		SCYT D 5;
		SCYT E 4;
		SCYT F 5 A_ReFire;
		Goto Ready;
	}
}
extend class Scyth
{
	action void A_Trim()
	{
		FTranslatedLineTarget t;

		if (player != null)
		{
			Weapon weap = player.ReadyWeapon;
			if (weap != null && !weap.bDehAmmo && invoker == weap && stateinfo != null && stateinfo.mStateType == STATE_Psprite)
			{
				if (!weap.DepleteAmmo (weap.bAltFire))
					return;
			}
		}

		int damage = 5 * random[Punch](1, 10) << 1;

		if (FindInventory("PowerStrength"))
			damage *= 10;

		double ang = angle + Random2[Punch]() * (5.625 / 256);
		double pitch = AimLineAttack (ang, BLADERANGE, null, 0., ALF_CHECK3D);

		LineAttack (ang, BLADERANGE, pitch, damage, 'Melee', "BulletPuff", LAF_ISMELEEATTACK, t);

		// turn to face target
		if (t.linetarget)
		{
			//A_PlaySound( "*fist", CHAN_WEAPON );
			angle = t.angleFromSource;
		}
	}
}

class UpBlood : Blood
{
	Default
	{
		+NOGRAVITY
	}
	States
	{
	Spawn:
		BLUD CBA 8 A_ChangeVelocity( vel.x, vel.y, 8 );
		Stop;
	}
}

class BigStem : BigTree
{
	//&Category Spooktober
	States
	{
	Spawn:
		STEM A -1;
		Stop;
	}
}

class LittleStem : Stalagtite
{
	States
	{
	//&Category Spooktober
	Spawn:
		STEM B -1;
		Stop;
	}
}

class Candolier : Candelabra
{
	//&Category Spooktober
	Default
	{
		+SPAWNCEILING
		+NOGRAVITY
		+FORCEYBILLBOARD
	}
	States
	{
	Spawn:
		CHLR AB 4 ;
		Loop;
	}
}


class InvertedBlueTorch : ShortBlueTorch
{
	//&Category Spooktober
	Default
	{
		//+SPAWNCEILING
		+NOGRAVITY
		+FORCEYBILLBOARD
	}
	States
	{
	Spawn:
		IVBT ABCD 4 BRIGHT;
		Loop;
	}
}

class UpSdDnMedikit : Medikit
{
	//&Category Spooktober
	Default
	{
		//YScale -1 ;
	}
	States
	{
	Spawn:
		IVMK A -1;
		Stop;
	}
}

class UpSdDnBluArmor : BlueArmor
{
	//&Category Spooktober
	Default
	{
		//YScale -1 ;
	}
	States
	{
	Spawn:
		IVBA A 6;
		IVBA B 6 bright;
		loop;
	}
}


class UpSdDnBulls : ClipBox
{
	//&Category Spooktober
	Default
	{
		//YScale -1 ;
	}
	States
	{
	Spawn:
		IVMO A -1;
		Stop;
	}
}

class UpSdDnShells : ShellBox
{
	//&Category Spooktober
	Default
	{
		//YScale -1 ;
	}
	States
	{
	Spawn:
		IVSB A -1;
		Stop;
	}
}

class UpSdDnBPack : BackPack
{
	//&Category Spooktober
	Default
	{
		//YScale -1 ;
	}
	States
	{
	Spawn:
		IVBP A -1;
		Stop;
	}
}

class InvertedMegaSphere : MegaSphere
{
	//&Category Spooktober
	Default
	{
		YScale -1 ;
		+FORCEXYBILLBOARD ;
	}
}

class InvertedBlurSphere : BlurSphere
{
	//&Category Spooktober
	Default
	{
		//YScale -1 ;
		+FORCEXYBILLBOARD ;
	}
	States
	{
	Spawn:
		INVS ABCD 6 Bright ;
		Loop ;
	}
}

class InverterabilitySphere : InvulnerabilitySphere
{
	//&Category Spooktober
	Default
	{
		YScale -1 ;
		+FORCEXYBILLBOARD ;
	}
}

class InvertedRockets : RocketBox
{
	//&Category Spooktober
	Default
	{
		//YScale -1 ;
	}
	States
	{
	Spawn:
		IVRK A -1 ;
		Stop ;
	}
}

class InvertedPlasmaRifle : Inventory
{
	//&Category Spooktober
	Default
	{
		YScale -1 ;
		Inventory.PickupMessage "" ;
		+INVENTORY.QUIET
	}
	States
	{
	Spawn:
		PLAS A -1;
		Stop;
	}
}

class InvertedBFG : Inventory
{
	//&Category Spooktober
	Default
	{
		YScale -1 ;
		Inventory.PickupMessage "" ;
		+INVENTORY.QUIET
		Height 20 ;
	}
	States
	{
	Spawn:
		BFUG A -1;
		Stop;
	}
}

class PeelinDemon : CyberDemon
{
	//&Category Spooktober
	Default
	{
		Translation "CyberPeelin" ;
		Obituary "You're still you, but to a crisp" ;
		+SPAWNCEILING
		+NOGRAVITY
		+DONTTHRUST
		+DONTFALL
		+DROPOFF
		BloodType "UpBlood" ;
	}
	States
	{
	Spawn:
		SYBR AB 10 A_Look;
		Loop;
	See:
		SYBR A 3 A_Hoof;
		SYBR ABBCC 3 A_Chase;
		SYBR D 3 A_Metal;
		SYBR D 3 A_Chase;
		Loop;
	Missile:
		TNT1 A 0 A_JumpIf( Random( 1, 4 ) == 1, "ArchAttack" );
		SYBR E 6 A_FaceTarget;
		SYBR F 12 A_CyberAttack;
		SYBR E 12 A_FaceTarget;
		SYBR F 12 A_CyberAttack;
		SYBR E 12 A_FaceTarget;
		SYBR F 12 A_CyberAttack;
		Goto See;
	ArchAttack:
		TNT1 A 0 BRIGHT A_VileStart;
		SYBR E 10 BRIGHT A_FaceTarget;
		SYBR E 8 BRIGHT A_VileTarget;
		SYBR E 48 BRIGHT A_FaceTarget;
		TNT1 A 0 A_FaceTarget;
		TNT1 A 0 A_CyberAttack ;
		SYBR F 8 BRIGHT A_VileAttack;
		SYBR F 20 BRIGHT;
		Goto See;
	Pain:
		SYBR G 10 A_Pain;
		Goto See;
	Death:
		SYBR H 10;
		SYBR I 10 A_Scream;
		SYBR JKL 10;
		SYBR M 10 A_NoBlocking;
		SYBR NO 10;
		SYBR P 30;
		SYBR P -1 A_BossDeath;
		Stop;
	}
}

class PumpKing : Archvile
{
	//&Category Spooktober
	Default
	{
		+INVULNERABLE
		+LOOKALLAROUND
		+TELESTOMP
	}
	States
	{
		Missile:
			Goto See ;
	}
}

class BoneyOne : Revenant
{
	//&Category Spooktober
	Default
	{
		Translation "BoneDry" ;
		Health 600 ;
		Obituary "The skeleton played Xylophone with your ribcage" ;
		+NOINFIGHTING
	}
	States
	{
	Missile:
		Goto See;
	}
}

Class InvertedBoney : BoneyOne
{
	//&Category Spooktober
	Default
	{
		BloodType "UpBlood" ;
	}
}

class WitchBrewer : PainElemental
{
	//&Category Spooktober
	States
	{
	Missile:
		PAIN D 5 A_FaceTarget;
		PAIN E 5 A_FaceTarget;
		PAIN F 5 BRIGHT A_FaceTarget;
		TNT1 A 0 BRIGHT A_PainAttack( "WitchSoul" );
		Goto See;
	Death:
		PAIN H 8 BRIGHT;
		PAIN I 8 BRIGHT A_Scream;
		PAIN J 8 BRIGHT;
		PAIN K 8 BRIGHT A_Explode ;
		PAIN L 8 BRIGHT A_PainDie( "WitchSoul" );
		PAIN M 8 BRIGHT;
		Stop;
	}
}

class WitchSoul : LostSoul
{
	//&Category Spooktober
	Default
	{
		Translation "Witch1" ;
		Health 50 ;
		Obituary "The Witch won?" ;
	}
	States
	{
	Spawn:
		SKUL AB 10 A_Look;
		Loop;
	See:
		SKUL AB 6 A_Chase;
		Loop;
	Missile:
		SKUL C 10 A_FaceTarget;
		SKUL D 4 A_SkullAttack;
		SKUL CD 4 ;
		Goto Missile+2;
	Pain:
		SKUL E 3 ;
		SKUL E 3 A_Pain;
		Goto See;
	Death:
		SKUL F 6 ;
		SKUL G 6 A_Scream;
		SKUL H 6 ;
		SKUL I 6 A_NoBlocking;
		SKUL J 6;
		SKUL K 6;
		Stop;
	}
}

//Spooker//////////////
class Spooker : Spectre
{
	//&Category Spooktober
	Default
	{
		Translation "HKnightPinky" ;
		RenderStyle "Translucent" ;
		Obituary "You got chomped by a Spooker!" ;
		HitObituary "You were Spooker spit-wadded" ;
		Alpha 0.2 ;
	}
	States
	{
	Missile:
		TNT1 A 0 A_JumpIf( Skill < 3, "See" );
		SARG EF 8 A_FaceTarget;
		SARG G 8 A_SpookAttack;
		Goto See;
	}
}
class SpookerBall : BaronBall
{
	Default
	{
		Translation "SpookerBlood" ;
		RenderStyle "Translucent" ;
		Alpha 0.1 ;
		-ZDOOMTRANS ;
		Damage 2 ;
	}
	States
	{
	Spawn:
		BAL7 AB 4 BRIGHT;
		Loop;
	Death:
		BAL7 CDE 6 BRIGHT;
		Stop;
	}
}
extend class Spooker
{
	void A_SpookAttack()
	{
		let targ = target;
		if (targ)
		{
			if (CheckMeleeRange())
			{
				int damage = random[pr_sargattack](1, 10) * 4;
				int newdam = targ.DamageMobj (self, self, damage, "Melee");
				targ.TraceBleed (newdam > 0 ? newdam : damage, self);
			}
			else
			{
				// launch a missile
				SpawnMissile (target, "SpookerBall");
			}
		}
	}
}
////////////////////////////

class MegasFear : Megasphere
{
	//&Category Spooktober
	Default
	{
		Translation "PumpkinBrain" ;
		+FORCEXYBILLBOARD ;
		//Inventory.PickupMessage "You got the pumpkin head";
	}
	States
	{
	Pickup:
		TNT1 A 0 A_GiveInventory("BlueArmorForMegasphere", 1);
		TNT1 A 0 A_GiveInventory("MegasphereHealth", 1);
		//TNT1 A 0 A_GiveInventory( "PumpkinKey", 1 );
		Stop;
	}
}

class PumpkinKey : Key
{
	Default
	{
		Inventory.Icon "PUMPKEY1";
	}
}

class TheBuried : ZombieMan
{
	//&Category Spooktober
	Default
	{
		+CORPSE
	}
	States
	{
	Spawn:
		GRVE A -1 NoDelay A_Immortal ;
		Stop ;
	Idle:
		POSS AB 10 A_Look;
		Loop;
	See:
		TNT1 A 0 A_JumpIf( !bCorpse, "Hunt" );
	Raise:
		TNT1 A 0 A_Immortal ;
		POSS KJIH 5 ;
		TNT1 A 0
		{
			Health = 20 ;
			PainChance = 200 ;
			bCorpse = false ;
			A_FindTarget() ;
		}
	Hunt:
		POSS AABBCCDD 4 A_Chase ;
		Loop ;
	Missile:
		POSS E 10 A_FaceTarget ;
		POSS F 8 A_PosAttack ;
		POSS E 8 ;
		Goto Hunt ;
	Pain:
		POSS G 3 ;
		POSS G 3 A_Pain ;
		Goto Hunt ;
	}
}
extend class TheBuried
{
	void A_Immortal()
	{
		Health = 999999 ;
		PainChance = 0 ;
	}
	void A_FindTarget()
	{
		int closest = 0 ;
		double shortest = 0x7fffffff ;
		for( int i = 0; i < MAXPLAYERS; i++ )
		{
			if( players[i].mo
			&& playeringame[i] )
			{
				double dist = self.Distance2D( players[i].mo );
				if( dist < shortest )
				{
					shortest = dist ;
					closest = i ;
				}
			}
		}
		Target = players[closest].mo ;
	}
}

class ChainedDown : ChaingunGuy
{
	//&Category Spooktober
	Default
	{
		+CORPSE
	}
	States
	{
	Spawn:
		GRV2 A -1 NoDelay A_Immortal ;
		Stop ;
	Idle:
		CPOS AB 10 A_Look;
		Loop;
	See:
		TNT1 A 0 A_JumpIf( !bCorpse, "Hunt" );
	Raise:
		TNT1 A 0 A_Immortal ;
		CPOS NMLKJIH 5 ;
		TNT1 A 0
		{
			Health = 70 ;
			PainChance = 170 ;
			bCorpse = false ;
			A_FindTarget() ;
		}
	Hunt:
		CPOS AABBCCDD 3 A_Chase;
		Loop ;
	Missile:
		CPOS E 10 A_FaceTarget;
		CPOS FE 4 BRIGHT A_CPosAttack;
		CPOS F 1 A_ChainedRefire;
		Goto Missile+1;
	Pain:
		CPOS G 3;
		CPOS G 3 A_Pain;
		Goto Hunt ;
	}
}
extend class ChainedDown
{
	void A_Immortal()
	{
		Health = 999999 ;
		PainChance = 0 ;
	}
	void A_ChainedRefire()
	{
		// keep firing unless target got out of sight
		A_FaceTarget();
		if (Random[CPosRefire](0, 255) >= 40)
		{
			if (!target
				|| HitFriend()
				|| target.health <= 0
				|| !CheckSight(target, SF_SEEPASTBLOCKEVERYTHING|SF_SEEPASTSHOOTABLELINES))
			{
				SetStateLabel( "Hunt" );
			}
		}
	}
	void A_FindTarget()
	{
		int closest = 0 ;
		double shortest = 0x7fffffff ;
		for( int i = 0; i < MAXPLAYERS; i++ )
		{
			if( players[i].mo
			&& playeringame[i] )
			{
				double dist = self.Distance2D( players[i].mo );
				if( dist < shortest )
				{
					shortest = dist ;
					closest = i ;
				}
			}
		}
		Target = players[closest].mo ;
	}
}

//Batboy/////////////////////
class DarkKnight : HellKnight
{
	//&Category Spooktober
	Default
	{
		Translation "DarkKnight" ;
		+NEVERTARGET
		+NOINFIGHTING
		Obituary "I oughtta hit you with a bat, man" ;
		HitObituary "You contracted Lyssavirus" ;
	}
	States
	{
	Melee:
	Missile:
		BOS2 EF 8 A_FaceTarget;
		BOS2 G 8 A_BatAttack;
		Goto See;
	}
}

class BatBall : BaronBall
{
	Default
	{
		Translation "DarkKnight" ;
	}
}

extend class DarkKnight
{
	void A_BatAttack()
	{
		let targ = target;
		if (targ)
		{
			if (CheckMeleeRange())
			{
				int damage = random[pr_bruisattack](1, 8) * 10;
				A_PlaySound ("baron/melee", CHAN_WEAPON);
				int newdam = target.DamageMobj (self, self, damage, "Melee");
				targ.TraceBleed (newdam > 0 ? newdam : damage, self);
			}
			else
			{
				// launch a missile
				SpawnMissile (target, "BatBall");
			}
		}
	}
}

//Plasmaster///////////////////////
class Plasmaster : SpiderMastermind
{
	//&Category Spooktober
	Default
	{
		Scale 2 ;
		Health 4500;
		Radius 128;
		Height 200;
		Obituary "%o stood in awe of the Plasmaster." ;
		HitObituary "You sizzled like a steak" ;
	}
	States
	{
	Missile:
		SPID A 20 BRIGHT A_FaceTarget;
		TNT1 A 0 A_JumpIfHigherOrLower( "PlasmaRifle", "Chaingun", 64, 0, false );
	Chaingun:
		SPID G 4 BRIGHT A_SPosAttackUseAtkSound;
		SPID H 4 BRIGHT A_SposAttackUseAtkSound;
		SPID H 1 BRIGHT A_SpidRefire;
		Goto Missile+1;
	PlasmaRifle:
		SPID A 4 BRIGHT
		{
			A_Plasmattack() ;
			A_SetTranslation( "Plasmaster" );
		}
		SPID A 4 BRIGHT
		{
			A_Plasmattack() ;
			A_SetTranslation( "None" );
		}
		SPID A 1 BRIGHT A_SpidRefire ;
		Goto Missile + 1 ;
	Pain:
		SPID I 3 A_SetTranslation( "None" );
		SPID I 3 A_Pain;
		Goto See;
	Death:
		SPID J 20
		{
			A_Scream() ;
			A_SetTranslation( "None" );
		}
		SPID KL 10 A_NoBlocking;
		SPID M 10 A_Explode;
		SPID NOPQR 10;
		SPID S 30;
		SPID S -1 A_BossDeath;
		Stop;
	}
}

class PlasmasterPlasma : ArachnotronPlasma
{
	Default
	{
		Radius 26;
		Height 16;
		Scale 2 ;
		RenderStyle "Translucent";
		+ROLLSPRITE
		+ROLLCENTER
		+FORCEXYBILLBOARD
	}

	States
	{
	Spawn:
		PLSS A 1 BRIGHT A_SetRoll( roll + 5, SPF_INTERPOLATE );
		PLSS A 1 BRIGHT A_SetRoll( roll + 8, SPF_INTERPOLATE );
		PLSS A 1 BRIGHT A_SetRoll( roll + 19, SPF_INTERPOLATE );
		PLSS A 1 BRIGHT A_SetRoll( roll + 8, SPF_INTERPOLATE );
		PLSS A 1 BRIGHT A_SetRoll( roll + 5, SPF_INTERPOLATE );
		Loop ;
	Death:
		TNT1 A 0 A_SetRoll( 0, false );
		PLSE ABCDE 4 BRIGHT;
		Stop;
	}

	/*doesn't respect rollcenter?
	int startic ;
	double currtic ;
	override void BeginPlay()
	{
		super.BeginPlay() ;
		startic = gametic ;
	}

	override void Tick()
	{
		super.Tick() ;
		currtic = ( gametic - startic ) * 0.2 ;
		A_SetRoll( floor( currtic ) * 45 + asin( currtic % 1 ) * 0.5, SPF_INTERPOLATE );
	}*/
}

extend class Plasmaster
{
	void A_Plasmattack()
	{
		if (target)
		{
			A_FaceTarget();
			SpawnMissileZ( 0, target, "PlasmasterPlasma");
		}
	}
}
