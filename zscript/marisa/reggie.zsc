// For Giraffe Man's map

Class mkDialogueSequence42 : mkDialogueSequence
{
	override void DialogueSeq( int state )
	{
		switch( state )
		{
		case 0:
			SetHeader("$REGGHDR");
			StartText("$REGGDLG1");
			break;
		case 1:
			StartText("$REGGDLG2");
			break;
		case 2:
			StartText("$REGGDLG3");
			break;
		case 3:
			EventHandler.SendNetworkEvent("reggiedropcan");
			StartText("$REGGDLG4");
			break;
		case 4:
			EventHandler.SendNetworkEvent("reggiemorph");
			EndSeq(0);
			break;
		}
	}}

Class mkDialogueSequence43 : mkDialogueSequence
{
	override void DialogueSeq( int state )
	{
		switch( state )
		{
		case 0:
			SetHeader("$REGGHDR");
			StartText("$REGGDLG5");
			break;
		case 1:
			StartText("$REGGDLG6");
			break;
		case 2:
			StartText("$REGGDLG7");
			break;
		case 3:
			StartText("$REGGDLG8");
			break;
		case 4:
			StartText("$REGGDLG9");
			break;
		case 5:
			StartText("$REGGDLG10");
			break;
		case 6:
			EventHandler.SendNetworkEvent("reggieend");
			EndSeq(0);
			break;
		}
	}
}

Class mkBeerCan : Casing44
{
	Default
	{
		BounceSound "";
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		roll = -90;
	}
	States
	{
	Spawn:
		BCAN A 1 A_SetRoll(roll+invoker.rollvel);
		Wait;
	Bounce:
		BCAN A 0 { invoker.rollvel = FRandom[Junk](10,30)*RandomPick[Junk](-1,1); }
		Goto Spawn;
	Death:
		BCAN A -1 A_SetRoll(FRandom[Junk](-5,5)+RandomPick[Junk](0,180));
		Stop;
	}
}

Class mkUncleReggie : Actor
{
	override bool Used( Actor user )
	{
		Activate(user);
		return true;
	}

	void A_DropCan()
	{
		Vector3 offset = (0,0,24);
		offset.xy = RotateVector((0,12),angle);
		let s = Spawn("mkBeerCan",Vec3Offset(offset.x,offset.y,offset.z));
		s.vel.xy = RotateVector((0.2,0.8),angle);
	}

	override void Activate( Actor activator )
	{
		if ( !score ) return;
		target = activator;
		mkDialogueHandler.StartDialogueSequence(self,activator,score);
		score = 0;
		if ( !InStateSequence(CurState,FindState("Spawn")) ) return;
		SetStateLabel("Dialogue");
		S_ChangeMusic("Evil");
	}

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		Score = 42;
	}

	Default
	{
		//$Title Uncle Reggie
		//$Category Marisa Kirisame
		RenderStyle "Translucent";
		Activation THINGSPEC_NoDeathSpecial;
		Radius 16;
		Height 56;
		+SOLID;
	}
	States
	{
	Spawn:
		REGG A -1;
		Stop;
	Dialogue:
		REGG A -1;
		Stop;
	DropCan:
		REGG B -1 A_DropCan();
		Stop;
	Morph:
		REGG C 0
		{
			ACS_Execute(45,0);
			S_ChangeMusic("ExplodHt");
			Autosave();
		}
		REGG C 150 A_QuakeEx(2,2,2,150,0,1200,flags:QF_RELATIVE|QF_SCALEUP,falloff:600);
		REGG C 0
		{
			bSOLID = false;
			tracer = Spawn("Diabolist",pos);
			tracer.Health += 2600;
			tracer.SetTag("$REGGHDR");
			tracer.scale = (1.0,0.7);
			tracer.Deactivate(target);
			tracer.angle = angle;
			tracer.bSHOOTABLE = false;
			tracer.A_SetRenderStyle(0.0,STYLE_Translucent);
			A_QuakeEx(1,1,1,50,0,1200,flags:QF_RELATIVE,falloff:600);
		}
		REGG C 1
		{
			tracer.A_FadeIn(0.02);
			tracer.angle = AngleTo(target);
			A_FadeOut(0.02,0);
			tracer.scale.x += 0.01;
			tracer.scale.y += 0.016;
			scale.x += 0.01;
			scale.y += 0.026;
			return A_JumpIf(alpha<=0,1);
		}
		Wait;
		TNT1 A 20 A_QuakeEx(2,2,2,30,0,1200,flags:QF_RELATIVE|QF_SCALEDOWN,falloff:600);
		TNT1 A 0
		{
			tracer.A_SetRenderStyle(1.0,STYLE_Normal);
			tracer.scale = (1.5,1.5);
			tracer.bSHOOTABLE = true;
			tracer.target = target;
			tracer.Activate(target);
			let hnd = SpooktoberHandler(EventHandler.Find("SpooktoberHandler"));
			hnd.bossenemy = tracer;
		}
		TNT1 A 1 A_JumpIf((tracer.Health<=0)&&(tracer.tics==-1),1);
		Wait;
		TNT1 A 0
		{
			scale = (1,1);
			A_SetSize(radius,height*0.8);
			bSOLID = true;
			SetOrigin(tracer.pos,false);
			S_ChangeMusic("");
			let hnd = SpooktoberHandler(EventHandler.Find("SpooktoberHandler"));
			hnd.bossenemy = null;
			let f = Spawn("DFire",pos);
			f.Scale *= 2;
			A_QuakeEx(2,2,2,50,0,1200,flags:QF_RELATIVE|QF_SCALEDOWN,falloff:600);
		}
		REGG D 1
		{
			if ( tracer ) tracer.A_FadeOut(0.04);
			A_FadeIn(0.04);
			Score = 43;
		}
		Wait;
	}
}
