// Umineko-style fade effect
Class mkSeacatFade : Actor
{
	double i;

	Default
	{
		+NOBLOCKMAP;
		+NOGRAVITY;
		+DONTSPLASH;
		Radius 16;
		Height 56;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		A_PlaySound("seacat/z1");
		i = 0;
		if ( target ) A_SetSize(target.radius,target.height);
	}
	override void Tick()
	{
		Super.Tick();
		if ( target ) SetOrigin(target.pos,true);
		double a, s;
		Vector2 spot;
		int l2 = int(i);
		double step = 3*(height/56.);
		double al = i/double(height);
		for ( int l=0; l<=l2; l++ )
		{
			for ( int j=0; j<(radius/8); j++ )
			{
				a = FRandom[Butterflies](0,360);
				s = FRandom[Butterflies](0,radius);
				spot = (cos(a),sin(a));
				A_SpawnParticle("FF FF FF",SPF_FULLBRIGHT,50,8,0,spot.x*s,spot.y*s,l+FRandom[Butterflies](-4,4),FRandom[Butterflies](0.6,1.0)+spot.x*0.4,spot.y*0.4,0.8,startalphaf:al);
			}
		}
		if ( (i+=step) >= height ) Destroy();
	}
}

// dialogue npc
// A: greeting
// B: ahaha.wav
// C: defeat
Class mkBeatrice : Actor
{
	override bool Used( Actor user )
	{
		if ( !score ) return false;
		mkDialogueHandler.StartDialogueSequence(self,user,score);
		return true;
	}
	Default
	{
		RenderStyle "Translucent";
		Alpha 0;
		Radius 16;
		Height 56;
		Scale 0.056;
		+SOLID;
	}
	override void PostBeginPlay()
	{
		let s = Spawn("mkSeacatFade");
		s.target = self;
	}
	States
	{
	Spawn:
		BEAT A 1 A_FadeIn(0.02,FTF_CLAMP);
		BEAT A 0 A_JumpIf(alpha>=1,"Idle");
		Loop;
	Idle:
		BEAT A -1;
		Stop;
	Ahaha:
		BEAT B 90 A_PlaySound("seacat/ahahawav",CHAN_VOICE);
		BEAT B 0
		{
			let s = Spawn("mkSeacatFade");
			s.target = self;
		}
		BEAT B 1 A_FadeOut(0.02);
		Wait;
	Defeat:
		BEAT C 1 A_FadeIn(0.02,FTF_CLAMP);
		BEAT C 0 A_JumpIf(alpha>=1,"DefeatIdle");
		Loop;
	DefeatIdle:
		BEAT C -1;
		Stop;
	DefeatFade:
		BEAT C 0
		{
			let s = Spawn("mkSeacatFade");
			s.target = self;
		}
		BEAT C 1 A_FadeOut(0.02);
		Wait;
	}
}

Class mkPoof : Actor
{
	Default
	{
		RenderStyle "Translucent";
		Scale 1.2;
		Alpha 0.5;
		+FORCEXYBILLBOARD;
		+NOBLOCKMAP;
		+NOGRAVITY;
	}
	States
	{
	Spawn:
		FX04 BCDEF 5;
		Stop;
	}
}

// all of the goats
Class mkGoatBall : Actor
{
	Default
	{
		Scale 1.2;
		Radius 6;
		Height 16;
		Speed 15;
		DamageFunction Random[Goat](4,6)*3;
		DamageType 'Magic';
		PROJECTILE;
		+RANDOMIZE;
		RenderStyle "Add";
		SeeSound "baron/attack";
		DeathSound "baron/shotx";
		Obituary "%o was burned to ashes by a goat servant.";
	}
	States
	{
	Spawn:
		BALG AB 4 BRIGHT;
		Loop;
	Death:
		BALG CDE 6 BRIGHT;
		Stop;
	}
}

Class mkGoatServant : Actor
{
	int chargetimer, sct;
	double bstr;

	override String GetObituary( Actor victim, Actor inflictor, Name mod, bool playerattack )
	{
		if ( mod == 'Slam' ) return "%o sucks at bullfighting.";
		return HitObituary;
	}

	Default
	{
		MONSTER;
		-SHOOTABLE;
		+NOINFIGHTSPECIES;
		Species "Goat";
		RenderStyle "Translucent";
		DamageFactor "Magic", 0;
		DamageFactor "AntiMagic", 999999999;
		Alpha 0;
		Health 200;
		PainChance 100;
		Scale 1.2;
		Radius 30;
		Height 80;
		Speed 15;
		Mass 300;
		MeleeRange 50;
		SeeSound "satyr/see";
		ActiveSound "knight/active";
		PainSound "knight/pain";
		DeathSound "satyr/die";
		HitObituary "%o was torn to shreds by a goat servant.";
	}
	override void PostBeginPlay()
	{
		let s = Spawn("mkSeacatFade");
		s.target = self;
	}
	override void Tick()
	{
		Super.Tick();
		if ( InStateSequence(CurState,ResolveState("Charge")) ) speed = 25;
		else speed = 15;
	}
	action void A_GoatAttack()
	{
		if ( !target || !CheckMeleeRange() ) return;
		int damage = random[Goat](2,3)*3;
		A_PlaySound("imp/melee",CHAN_WEAPON);
		int newdam = target.DamageMobj(self,self,damage,'Melee');
		target.TraceBleed(newdam>0?newdam:damage,self);
		Vector2 bleeddir = target.Vec2To(invoker).unit();
		Vector3 bleedpos = target.pos+((cos(bleeddir.x)+sin(bleeddir.y))*target.radius,(sin(bleeddir.x)-cos(bleeddir.y))*target.radius,target.height*0.5);
		target.SpawnBlood(bleedpos,atan2(bleeddir.y,bleeddir.x),newdam>0?newdam:damage);
	}
	action void A_GoatAttack2()
	{
		if ( !target ) return;
		SpawnMissile(target,"mkGoatBall");
		if ( CheckMeleeRange() )
		{
			int damage = random[Goat](2,3)*5;
			A_PlaySound("imp/melee",CHAN_WEAPON);
			int newdam = target.DamageMobj(self,self,damage,'Melee');
			target.TraceBleed(newdam>0?newdam:damage,self);
			Vector2 bleeddir = target.Vec2To(invoker).unit();
			Vector3 bleedpos = target.pos+((cos(bleeddir.x)+sin(bleeddir.y))*target.radius,(sin(bleeddir.x)-cos(bleeddir.y))*target.radius,target.height*0.5);
			target.SpawnBlood(bleedpos,atan2(bleeddir.y,bleeddir.x),newdam>0?newdam:damage);
		}
	}
	States
	{
	Spawn:
		GOAT A 1 A_FadeIn(0.02,FTF_CLAMP);
		GOAT A 0 A_JumpIf(alpha>=1,"Idle");
		Loop;
	Idle:
		GOAT A 0 { bSHOOTABLE = true; }
		GOAT A 1 A_Look();
		Wait;
	See:
		GOAT A 0
		{
			invoker.sct = 0;
		}
		GOAT AABBCCDD 3
		{
			if ( !(sct%4) )
			{
				A_QuakeEx(3,3,3,8,0,200,"",QF_RELATIVE|QF_SCALEDOWN,falloff:100);
				A_PlaySound("goat/step",CHAN_7,0.1,false,2.0);
			}
			sct++;
			A_Chase();
			double targetdist = Vec2To(target).length();
			if ( CheckIfTargetInLOS(360) && (targetdist > 500) && (Random[Goat]() < 20) )
			{
				FLineTraceData d;
				LineTrace(AngleTo(target),Vec2To(target).length(),0,TRF_SOLIDACTORS,height/2,0,0,data:d);
				if ( (d.HitType == TRACE_HitNone) || ((d.HitType == TRACE_HitActor) && (d.HitActor == target)) )
					return ResolveState("Charge");
			}
			return ResolveState(null);
		}
		Goto See+1;
	Charge:
		GOAT H 12
		{
			PainChance = 0;
			A_FaceTarget();
			A_PlaySound(SeeSound,CHAN_WEAPON);
			invoker.chargetimer = Random[Goat](15,25);
			invoker.sct = 0;
		}
		GOAT A 0 { PainChance = 30; }
		GOAT AABBCCDD 2
		{
			if ( Random[GoatMove]() < 3 ) PlayActiveSound();
			if ( !(sct%4) )
			{
				A_QuakeEx(4,4,4,8,0,400,"",QF_RELATIVE|QF_SCALEDOWN,falloff:150);
				A_PlaySound("goat/step",CHAN_7,0.4);
			}
			sct++;
			A_FaceTarget(3);
			Vector2 dir = (cos(angle),sin(angle));
			bool moved = TryMove(pos.xy+dir*speed,int(maxdropoffheight));
			if ( CheckMeleeRange() ) BlockingMobj = target;
			if ( BlockingMobj )
			{
				Actor victim = BlockingMobj;
				int dmg = Random[Goat](6,9)*4;
				if ( victim is 'mkGoatServant' ) dmg = 0;
				victim.DamageMobj(invoker,invoker,dmg,'Slam',DMG_THRUSTLESS);
				Vector3 dirto = invoker.Vec3To(victim).unit();
				victim.vel.xy = dirto.xy*(2000./victim.mass);
				victim.vel.z = (900./victim.mass);
				if ( !victim.bSHOOTABLE || victim.bNOBLOOD ) A_PlaySound("goat/hitwall",CHAN_6);
				else A_PlaySound("goat/hit",CHAN_6);
				A_QuakeEx(6,6,6,10,0,500,"",QF_RELATIVE|QF_SCALEDOWN,falloff:200);
				vel.xy = RotateVector((-8,0),angle);
				vel.z = 4;
				return ResolveState("Recoil");
			}
			if ( !moved )
			{
				A_PlaySound("goat/hitwall",CHAN_6);
				A_QuakeEx(6,6,6,10,0,500,"",QF_RELATIVE|QF_SCALEDOWN,falloff:200);
				vel.xy = RotateVector((-8,0),angle);
				vel.z = 4;
				return ResolveState("PainRecoil");
			}
			if ( abs(DeltaAngle(angle,AngleTo(target))) > 90 ) invoker.chargetimer = min(invoker.chargetimer,2);
			return ResolveState(null);
		}
		GOAT D 0
		{
			invoker.chargetimer--;
			if ( invoker.chargetimer <= 0 )
				return ResolveState("Brake");
			return ResolveState(null);
		}
		Goto Charge+1;
	Missile:
		GOA2 F 0 A_Jump(128,"Missile2");
	Missile_:
		GOA2 FEF 3 A_FaceTarget();
		GOA2 G 4 A_GoatAttack2();
		GOA2 F 2;
		GOA2 F 0 A_JumpIf(CheckMeleeRange(),"Melee2");
		GOA2 F 0 A_Jump(192,"See");
		GOA2 F 0 A_JumpIfTargetInLOS("Missile2");
		Goto See;
	Missile2:
		GOA2 QPQ 3 A_FaceTarget();
		GOA2 R 4 A_GoatAttack2();
		GOA2 Q 2;
		GOA2 Q 0 A_JumpIf(CheckMeleeRange(),"Melee_");
		GOA2 Q 0 A_Jump(192,"See");
		GOA2 Q 0 A_JumpIfTargetInLOS("Missile_");
		Goto See;
	Melee:
		GOAT F 0 A_Jump(128,"Melee2");
	Melee_:
		GOAT F 3 { A_FaceTarget(); A_Recoil(-1.0); }
		GOAT EF 3 A_FaceTarget();
		GOAT G 4 A_GoatAttack();
		GOAT F 2;
		GOAT F 0 A_JumpIf(!CheckMeleeRange(),"See");
		Goto Melee2;
	Melee2:
		GOAT Q 3 { A_FaceTarget(); A_Recoil(-1.0); }
		GOAT PQ 3 A_FaceTarget();
		GOAT R 4 A_GoatAttack();
		GOAT Q 2;
		GOAT Q 0 A_JumpIf(!CheckMeleeRange(),"See");
		Goto Melee+1;
	Pain:
		GOAT H 0 A_JumpIf(invoker.chargetimer>0,"PainRecoil");
		GOAT H 0 { PainChance = 100; }
		GOAT H 10 A_Pain();
		Goto See;
	Recoil:
		GOAT A 0 { PainChance = 0; }
		GOAT A 30;
		GOAT A 1 A_JumpIf(vel.length()<1,1);
		Wait;
		GOAT A 0 { PainChance = 100; }
		Goto See;
	PainRecoil:
		GOAT H 0 { PainChance = 0; }
		GOAT H 10 A_Pain();
		GOAT A 20;
		GOAT A 1 A_JumpIf(vel.length()<1,1);
		Wait;
		GOAT A 0 { PainChance = 100; }
		Goto See;
	Brake:
		GOAT A 0
		{
			invoker.sct = 0;
			PainChance = 100;
			invoker.bstr = speed*0.8;
			vel.xy = RotateVector((bstr,0),angle);
			A_PlaySound("goat/step",CHAN_7);
			A_PlaySound("goat/brake",CHAN_5);
		}
		GOAT A 1
		{
			if ( !(sct%3) && (vel.length() > 2) )
			{
				Vector3 ofs = (0,0,8);
				ofs.xy = RotateVector((10,0),angle+90);
				Spawn("mkPoof",pos+ofs);
				ofs.xy = RotateVector((10,0),angle-90);
				Spawn("mkPoof",pos+ofs);
			}
			sct++;
			A_FaceTarget(3);
			vel.xy = vel.xy*0.8+RotateVector((bstr,0)*0.2,angle);
			bstr *= 0.95;
			if ( vel.xy.length() <= 1 ) return ResolveState("See");
			return ResolveState(null);
		}
		Wait;
	Death:
		GOAT I 0 A_Jump(128,"Death2");
		GOAT I 6;
		GOAT J 6 A_Scream();
		GOAT K 5;
		GOAT L 5 A_NoBlocking();
		GOAT M 4
		{
			A_QuakeEx(6,6,6,30,0,800,"",QF_RELATIVE|QF_SCALEDOWN,falloff:200);
			A_PlaySound("goat/thump",CHAN_7);
		}
		GOAT N 3;
		GOAT O 300;
		GOAT O 0
		{
			let s = Spawn("mkSeacatFade",pos);
			s.target = invoker;
		}
		GOAT O 1 A_FadeOut(0.02);
		Wait;
	Death2:
		GOAT S 5;
		GOAT T 5 A_Scream();
		GOAT UV 4;
		GOAT W 3 A_QuakeEx(6,6,6,30,0,800,"",QF_RELATIVE|QF_SCALEDOWN,falloff:200);
		GOAT X 3
		{
			A_NoBlocking();
			A_PlaySound("goat/thump",CHAN_7);
		}
		GOAT Y 300;
		GOAT Y 0
		{
			let s = Spawn("mkSeacatFade",pos);
			s.target = invoker;
		}
		GOAT Y 1 A_FadeOut(0.02);
		Wait;
	}
}

// based on realm667 weapon
Class ShotShellC : DoomWeapon
{
	int deadtimer;
	double rollvel;

	Default
	{
		Radius 2;
		Height 2;
		+NOBLOCKMAP;
		+ROLLSPRITE;
		+ROLLCENTER;
		+FORCEXYBILLBOARD;
		+MISSILE;
		+MOVEWITHSECTOR;
		+THRUACTORS;
		BounceType "Doom";
		BounceFactor 0.5;
		BounceSound "misc/scase";
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		deadtimer = 0;
		rollvel = FRandom[Junk](20,80)*RandomPick[Junk](-1,1);
	}
	override void Tick()
	{
		Super.Tick();
		if ( InStateSequence(CurState,ResolveState("Death")) )
		{
			deadtimer++;
			if ( deadtimer > 300 ) A_FadeOut(0.1);
			return;
		}
	}
	States
	{
	Spawn:
		SHL1 A 1 A_SetRoll(roll+invoker.rollvel);
		Wait;
	Bounce:
		SHL1 A 0 { invoker.rollvel = FRandom[Junk](10,30)*RandomPick[Junk](-1,1); }
		Goto Spawn;
	Death:
		SHL1 A -1 A_SetRoll(FRandom[Junk](-5,5)+RandomPick[Junk](0,180));
		Stop;
	}
}

Class Model1887 : DoomWeapon
{
	Default
	{
		Tag "Model 1887 Shotgun";
		Weapon.SelectionOrder 1300;
		Weapon.SlotNumber 3;
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 8;
		Weapon.AmmoType "Shell";
		Inventory.PickupMessage "You got the model 1887 shotgun!";
		+WEAPON.CHEATNOTWEAPON;
	}
	action void A_FireShot()
	{
		let w = Weapon(invoker);
		if ( !w || (w.Ammo1.Amount <= 0) || !w.DepleteAmmo(w.bAltFire,true,1) )
			return;
		A_PlaySound("seacat/rfire",CHAN_WEAPON);
		A_GunFlash();
		Vector3 x, y, z, dir;
		double a, s;
		[x, y, z] = st_Matrix4Lite.GetAxes(BulletSlope(),angle,roll);
		for ( int i=0; i<11; i++ )
		{
			a = FRandom[M1887](0,360);
			s = FRandom[M1887](0,0.05);
			dir = (x+y*cos(a)*s+z*sin(a)*s).unit();
			LineAttack(atan2(dir.y,dir.x),PLAYERMISSILERANGE,asin(-dir.z),Random[GunShot](4,7)*3,'Hitscan',"BulletPuff");
		}
	}
	action void A_Eject()
	{
		Vector3 ofs = Vec2OffsetZ(0,0,player.viewz);
		Vector3 x, y, z;
		[x, y, z] = st_Matrix4Lite.GetAxes(pitch,angle,roll);
		ofs += x*20.-y*15-z*12;
		let c = Spawn("ShotShellC",ofs);
		c.vel = x*FRandom[Junk](0,2)-y*FRandom[Junk](5,8)+z*FRandom[Junk](3,6);
		c.vel += vel*0.5;
	}
	States
	{
	Spawn:
		MSSI A -1;
		Stop;
	Select:
		MSSG A 1 A_Raise();
		Wait;
	Ready:
		MSSG A 1 A_WeaponReady();
		Wait;
	Fire:
		MSSG A 3;
		MSSG A 0 A_FireShot();
		MSSF AA 1 A_WeaponOffset(0,4,WOF_ADD);
		MSSF AB 1 A_WeaponOffset(0,2,WOF_ADD);
		MSSF BB 1 A_WeaponOffset(0,1,WOF_ADD);
		MSSF AA 1 A_WeaponOffset(0,-3,WOF_ADD);
		MSSG AAAA 1 A_WeaponOffset(0,-2,WOF_ADD);
		MSSG A 3;
		MSSG A 0 A_PlaySound("seacat/rreload",CHAN_5);
		MSSG AA 1 A_WeaponOffset(-6,0,WOF_ADD);
		MSSG BBB 1 A_WeaponOffset(-4,2,WOF_ADD);
		MSSG CCC 1 A_WeaponOffset(-3,3,WOF_ADD);
		MSSG DDD 1 A_WeaponOffset(-2,4,WOF_ADD);
		MSSG EE 1 A_WeaponOffset(-1,6,WOF_ADD);
		MSSG E 3 A_Eject();
		MSSG EE 1 A_WeaponOffset(1,-6,WOF_ADD);
		MSSG DDD 1 A_WeaponOffset(2,-4,WOF_ADD);
		MSSG CCC 1 A_WeaponOffset(3,-3,WOF_ADD);
		MSSG BBB 1 A_WeaponOffset(4,-2,WOF_ADD);
		MSSG AA 1 A_WeaponOffset(6,0,WOF_ADD);
		Goto Ready;
	Flash:
		TNT1 A 4 A_Light1();
		TNT1 A 4 A_Light2();
		Goto LightDone;
	Deselect:
		MSSG A 1 A_Lower();
		Wait;
	}
}

Class mkSkySphere : Actor
{
	Default
	{
		Radius 32;
		Height 32;
		+NOBLOCKMAP;
		+NOGRAVITY;
		+DONTSPLASH;
	}
	States
	{
	Spawn:
		MODL A -1 BRIGHT;
		Stop;
	}
}