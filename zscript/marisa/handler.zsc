// global data shared between maps, used for progression
Class SpooktoberGlobals : Thinker
{
	bool completion[18];
	bool unlocks[5];
	int maptimes[2][18];
	int mapkills[2][18];
	int mapitems[2][18];
	int mapsecrets[2][18];
	int stage;

	static void MakeInstance()
	{
		let t = ThinkerIterator.Create("SpooktoberGlobals",STAT_STATIC);
		let vars = SpooktoberGlobals(t.Next());
		if ( vars ) return;
		vars = new("SpooktoberGlobals");
		vars.ChangeStatNum(STAT_STATIC);
	}

	static clearscope SpooktoberGlobals GetInstance()
	{
		let t = ThinkerIterator.Create("SpooktoberGlobals",STAT_STATIC);
		let vars = SpooktoberGlobals(t.Next());
		return vars;
	}

	static void SetUnlock( int n )
	{
		let v = GetInstance();
		if ( !v ) return;
		v.unlocks[n] = true;
	}

	static clearscope bool GetUnlock( int n )
	{
		let v = GetInstance();
		if ( !v ) return false;
		return v.unlocks[n];
	}

	static void SetCompletion( int n, bool forced = false )
	{
		if ( (n < 0) || (n > 17) ) return;
		let v = GetInstance();
		if ( !v ) return;
		v.completion[n] = true;
		if ( !forced )
		{
			// store the stats
			v.maptimes[n][0] = level.maptime/Thinker.TICRATE;
			v.maptimes[n][1] = level.partime;	// this one is in seconds
			v.mapkills[n][0] = level.killed_monsters;
			v.mapkills[n][1] = level.total_monsters;
			v.mapitems[n][0] = level.found_items;
			v.mapitems[n][1] = level.total_items;
			v.mapsecrets[n][0] = level.found_secrets;
			v.mapsecrets[n][1] = level.total_secrets;
		}
		if ( (n <= 12) && GetFullCompletion(4) ) v.stage = max(5,v.stage);
		else if ( (n <= 11) && GetFullCompletion(3) ) v.stage = max(4,v.stage);
		else if ( (n <= 8) && GetFullCompletion(2) ) v.stage = max(3,v.stage);
		else if ( (n <= 5) && GetFullCompletion(1) ) v.stage = max(2,v.stage);
		else if ( (n <= 2) && GetFullCompletion(0) ) v.stage = max(1,v.stage);
	}

	static clearscope bool GetCompletion( int n )
	{
		let v = GetInstance();
		if ( !v ) return false;
		return v.completion[n];
	}

	static clearscope int, int GetTimes( int n )
	{
		let v = GetInstance();
		if ( !v ) return 0, 0;
		return v.maptimes[n][0], v.maptimes[n][1];
	}

	static clearscope int, int GetKills( int n )
	{
		let v = GetInstance();
		if ( !v ) return 0, 0;
		return v.mapkills[n][0], v.mapkills[n][1];
	}

	static clearscope int, int GetItems( int n )
	{
		let v = GetInstance();
		if ( !v ) return 0, 0;
		return v.mapitems[n][0], v.mapitems[n][1];
	}

	static clearscope int, int GetSecrets( int n )
	{
		let v = GetInstance();
		if ( !v ) return 0, 0;
		return v.mapsecrets[n][0], v.mapsecrets[n][1];
	}

	static clearscope bool GetFullCompletion( int n )
	{
		let v = GetInstance();
		if ( n == 0 )	// foyer
			return (v.completion[0]&&v.completion[1]&&v.completion[2]);
		else if ( n == 1 )	// east wing
			return (v.completion[3]&&v.completion[4]&&v.completion[5]);
		else if ( n == 2 )	// west wing
			return (v.completion[6]&&v.completion[7]&&v.completion[8]);
		else if ( n == 3 )	// second floor
			return (v.completion[9]&&v.completion[10]&&v.completion[11]);
		else if ( n == 4 )	// basement (final boss)
			return (v.completion[12]);
		else if ( n == 5 )	// secret maps
			return (v.completion[13]&&v.completion[14]&&v.completion[15]&&v.completion[16]&&v.completion[17]);
		return false;
	}

	static clearscope int GetStage()
	{
		let v = GetInstance();
		if ( !v ) return -1;
		return v.stage;
	}
}

// replacer for maps that use it
class SpooktoberBossBrain : BossBrain
{
	void A_BrainDieAlt()
	{
		// [RH] If noexit, then don't end the level.
		if ( (deathmatch || alwaysapplydmflags) && sv_noexit )
			return;
		// New dmflag: Kill all boss spawned monsters before ending the level.
		if ( sv_killbossmonst )
		{
			int count;	// Repeat until we have no more boss-spawned monsters.
			ThinkerIterator it = ThinkerIterator.Create("Actor");
			do			// (e.g. Pain Elementals can spawn more to kill upon death.)
			{
				Actor mo;
				it.Reinit();
				count = 0;
				while ( mo = Actor(it.Next()) )
				{
					if ( mo.health > 0 && mo.bBossSpawned )
					{
						mo.DamageMobj(self,self,mo.health,'None',DMG_NO_ARMOR|DMG_FORCED|DMG_THRUSTLESS|DMG_NO_FACTOR);
						// [Blue Shadow] If 'mo' is a RandomSpawner or another actor which can't be killed,
						// it could cause this code to loop indefinitely. So only let it trigger a loop if it
						// has been actually killed.
						if (mo.bKilled) count++;
					}
				}
			} while ( count != 0 );
		}
		//Exit_Normal(0);
		level.ExecuteSpecial(80,target,null,false,-int('MapFadeOut'));
	}

	States
	{
	Death:
		BBRN A 100 A_BrainScream();
		BBRN AA 10;
		BBRN A -1 A_BrainDieAlt();
		Stop;
	}
}

Struct marifx_gradingvars
{
	Vector3 grademul, gradepow, gradecol;
	float gradecolfact, gradesatmul, gradesatpow, gradevalmul, gradevalpow;
};

// main handler of various events
Class SpooktoberHandler : EventHandler
{
	transient FLineTraceData tdata;
	double fspeed[MAXPLAYERS];
	int fphase[MAXPLAYERS], ftic[MAXPLAYERS];
	transient ui Font titlefont, authorfont, statsfont, commentfont;
	int tcnt;
	// color grading (with transitions)
	marifx_gradingvars gvars, gvars_in, gvars_out;
	float gphase, gspeed;
	bool genabled;
	Actor bossenemy;
	ui mkBossHealthBar bossbar;

	override void CheckReplacement( ReplaceEvent e )
	{
		if ( e.Replacee == 'BossBrain' )
		{
			e.Replacement = 'SpooktoberBossBrain';
			return;
		}
		if ( e.Replacee != 'mkNightmareLord' ) return;
		switch ( G_SkillPropertyInt(SKILLP_ACSReturn) )
		{
		case 0:
		case 1:
			e.Replacement = 'mkNightmareLordEasy';
			break;
		case 3:
		case 4:
			e.Replacement = 'mkNightmareLordHard';
			break;
		}
	}

	override void PostUiTick()
	{
		if ( !bossenemy || bossbar ) return;
		bossbar = new("mkBossHealthBar").Init(bossenemy,bossenemy.GetTag());
		StatusBar.AttachMessage(bossbar);
	}

	override void WorldLoaded( WorldEvent e )
	{
		// initialize globals
		SpooktoberGlobals.MakeInstance();
		if ( !e.IsSaveGame )
			level.ExecuteSpecial(80,null,null,false,-int('MapFadeIn'));
		else if ( fspeed[consoleplayer] <= 0 )
			Shader.SetEnabled(players[consoleplayer],"blurfade",false);
		tcnt = 0;
		gvars.grademul = (1.0,1.0,1.0);
		gvars.gradepow = (1.0,1.0,1.0);
		gvars.gradecol = (1.0,1.0,1.0);
		gvars.gradecolfact = 0.0;
		gvars.gradesatmul = 1.0;
		gvars.gradesatpow = 1.0;
		gvars.gradevalmul = 1.0;
		gvars.gradevalpow = 1.0;
		if ( level.levelnum == 14 )
			GradingTransition(0,0);
		if ( level.levelnum == 19 )
			GradingTransition(2,0);
	}

	static void GradingTransition( int preset, double speed = 1.0 )
	{
		let hnd = SpooktoberHandler(EventHandler.Find("SpooktoberHandler"));
		if ( !hnd ) return;
		switch ( preset )
		{
		case 0:
			// initial preset
			hnd.gvars_out.grademul = (1.12,1.03,0.88);
			hnd.gvars_out.gradepow = (1.07,1.03,1.05);
			hnd.gvars_out.gradecol = (-0.46,-0.31,-0.42);
			hnd.gvars_out.gradecolfact = -0.18;
			hnd.gvars_out.gradesatmul = 0.97;
			hnd.gvars_out.gradesatpow = 1.12;
			hnd.gvars_out.gradevalmul = 0.95;
			hnd.gvars_out.gradevalpow = 1.18;
			break;
		case 1:
			// nightmare lord preset
			hnd.gvars_out.grademul = (1.08,1.02,1.13);
			hnd.gvars_out.gradepow = (1.02,1.11,0.84);
			hnd.gvars_out.gradecol = (-0.11,-0.09,-0.33);
			hnd.gvars_out.gradecolfact = -0.19;
			hnd.gvars_out.gradesatmul = 0.82;
			hnd.gvars_out.gradesatpow = 1.22;
			hnd.gvars_out.gradevalmul = 1.15;
			hnd.gvars_out.gradevalpow = 1.25;
			break;
		case 2:
			// seacat preset
			hnd.gvars_out.grademul = (1.01,0.96,1.03);
			hnd.gvars_out.gradepow = (0.96,1.08,0.87);
			hnd.gvars_out.gradecol = (-0.14,-0.03,-0.19);
			hnd.gvars_out.gradecolfact = -0.13;
			hnd.gvars_out.gradesatmul = 0.93;
			hnd.gvars_out.gradesatpow = 1.13;
			hnd.gvars_out.gradevalmul = 0.82;
			hnd.gvars_out.gradevalpow = 1.21;
			break;
		}
		hnd.genabled = true;
		hnd.gphase = 0;
		hnd.gspeed = speed/Thinker.TICRATE;
		if ( speed <= 0 )
		{
			hnd.gspeed = 0;
			hnd.gvars.grademul = hnd.gvars_out.grademul;
			hnd.gvars.gradepow = hnd.gvars_out.gradepow;
			hnd.gvars.gradecol = hnd.gvars_out.gradecol;
			hnd.gvars.gradecolfact = hnd.gvars_out.gradecolfact;
			hnd.gvars.gradesatmul = hnd.gvars_out.gradesatmul;
			hnd.gvars.gradesatpow = hnd.gvars_out.gradesatpow;
			hnd.gvars.gradevalmul = hnd.gvars_out.gradevalmul;
			hnd.gvars.gradevalpow = hnd.gvars_out.gradevalpow;
		}
		hnd.gvars_in.grademul = hnd.gvars.grademul;
		hnd.gvars_in.gradepow = hnd.gvars.gradepow;
		hnd.gvars_in.gradecol = hnd.gvars.gradecol;
		hnd.gvars_in.gradecolfact = hnd.gvars.gradecolfact;
		hnd.gvars_in.gradesatmul = hnd.gvars.gradesatmul;
		hnd.gvars_in.gradesatpow = hnd.gvars.gradesatpow;
		hnd.gvars_in.gradevalmul = hnd.gvars.gradevalmul;
		hnd.gvars_in.gradevalpow = hnd.gvars.gradevalpow;
	}

	override void WorldLinePreActivated( WorldEvent e )
	{
		if ( level.levelnum != 1 ) return;
		// prevent transition doors from being activated while in use
		if ( (e.ActivatedLine.special != 226) || (e.ActivatedLine.args[0] != 21) ) return;
		if ( e.Thing.player && e.Thing.player.cheats&CF_TOTALLYFROZEN ) e.ShouldActivate = false;
	}

	override void WorldTick()
	{
		tcnt++;
		if ( gspeed > 0 )
		{
			gphase += gspeed;
			gphase = min(gphase,1);
			gvars.grademul = gvars_in.grademul*(1-gphase)+gvars_out.grademul*gphase;
			gvars.gradepow = gvars_in.gradepow*(1-gphase)+gvars_out.gradepow*gphase;
			gvars.gradecol = gvars_in.gradecol*(1-gphase)+gvars_out.gradecol*gphase;
			gvars.gradecolfact = gvars_in.gradecolfact*(1-gphase)+gvars_out.gradecolfact*gphase;
			gvars.gradesatmul = gvars_in.gradesatmul*(1-gphase)+gvars_out.gradesatmul*gphase;
			gvars.gradesatpow = gvars_in.gradesatpow*(1-gphase)+gvars_out.gradesatpow*gphase;
			gvars.gradevalmul = gvars_in.gradevalmul*(1-gphase)+gvars_out.gradevalmul*gphase;
			gvars.gradevalpow = gvars_in.gradevalpow*(1-gphase)+gvars_out.gradevalpow*gphase;
			if ( gphase >= 1 )
			{
				gphase = 0;
				gspeed = 0;
			}
		}
		for ( int i=0; i<MAXPLAYERS; i++ )
		{
			if ( !playeringame[i] ) continue;
			if ( fspeed[i] > double.epsilon )
			{
				double str = (level.totaltime-ftic[i])/(Thinker.TICRATE*fspeed[i]);
				if ( str > 1.0 )
				{
					Shader.SetEnabled(players[i],"blurfade",false);
					fspeed[i] = 0;
				}
			}
		}
		if ( level.levelnum != 1 ) return;
		// trace from consoleplayer and see what hits
		PlayerPawn mo = players[consoleplayer].mo;
		mo.LineTrace(mo.angle,140,mo.pitch,TRF_THRUACTORS,mo.viewheight,data:tdata);
	}

	override void RenderOverlay( RenderEvent e )
	{
		PlayerInfo p = players[consoleplayer];
		Shader.SetEnabled(p,"marifx_grading",genabled);
		if ( genabled )
		{
			Shader.SetUniform3f(p,"marifx_grading","grademul",gvars.grademul);
			Shader.SetUniform3f(p,"marifx_grading","gradepow",gvars.gradepow);
			Shader.SetUniform3f(p,"marifx_grading","gradecol",gvars.gradecol);
			Shader.SetUniform1f(p,"marifx_grading","gradecolfact",gvars.gradecolfact);
			Shader.SetUniform1f(p,"marifx_grading","gradesatmul",gvars.gradesatmul);
			Shader.SetUniform1f(p,"marifx_grading","gradesatpow",gvars.gradesatpow);
			Shader.SetUniform1f(p,"marifx_grading","gradevalmul",gvars.gradevalmul);
			Shader.SetUniform1f(p,"marifx_grading","gradevalpow",gvars.gradevalpow);
		}
		// guarantee smooth transition
		if ( tcnt <= 1 ) Screen.Dim("Black",1.0,0,0,Screen.GetWidth(),Screen.GetHeight());
		// fader shader
		if ( fspeed[consoleplayer] > double.epsilon )
		{
			double str = clamp(((level.totaltime-ftic[consoleplayer])+e.fractic)/(Thinker.TICRATE*fspeed[consoleplayer]),0.0,1.0);
			if ( fphase[consoleplayer] ) str = 1.0-str;
			Shader.SetUniform1f(p,"blurfade","strength",str);
		}
		if ( (level.levelnum != 1) || automapactive ) return;
		if ( (tdata.HitType != TRACE_HitWall) || (tdata.LinePart != 1) || (tdata.HitLine.special != 80) ) return;
		// painting info overlays
		if ( !titlefont ) titlefont = Font.GetFont('GRGW_LWR');
		if ( !authorfont ) authorfont = Font.GetFont('GARGSMAL');
		if ( !statsfont ) statsfont = Font.GetFont('DietLogFont');
		if ( tdata.HitLine.args[0] == 13 )
		{
			if ( !commentfont ) commentfont = Font.GetFont('STAT_LWR');
			// author painting
			String aname = StringTable.Localize(String.Format("$SP_AUTHOR%d",tdata.HitLine.args[2]));
			String atitle = StringTable.Localize(String.Format("$SP_TITLE%d",tdata.HitLine.args[2]));
			String amessage = StringTable.Localize(String.Format("$SP_MESSAGE%d",tdata.HitLine.args[2]));
			double ypos = 130;
			int len;
			len = titlefont.StringWidth(aname);
			Screen.DrawText(titlefont,Font.CR_WHITE,(320.-len)/2,ypos,aname,DTA_Bottom320x200,true);
			ypos += titlefont.GetHeight()+2;
			len = authorfont.StringWidth(atitle);
			Screen.DrawText(authorfont,Font.CR_GOLD,(320.-len)/2.,ypos,atitle,DTA_Bottom320x200,true);
			ypos += authorfont.GetHeight()+6;
			let bl = commentfont.BreakLines(amessage,300);
			for ( int i=0; i<bl.Count(); i++ )
			{
				len = commentfont.StringWidth(bl.StringAt(i));
				Screen.DrawText(commentfont,Font.CR_GREEN,(320.-len)/2.,ypos,bl.StringAt(i),DTA_Bottom320x200,true);
				ypos += commentfont.GetHeight()+1;
			}
			return;
		}
		if ( (tdata.HitLine.args[0] != 10) || !talkedtofirstmonk ) return;
		// level painting
		// get map name from levelnum
		String mname = "???";
		if ( (tdata.HitLine.args[2] >= 2) && (tdata.HitLine.args[2] <= 14) )
			mname = StringTable.Localize(String.Format("$SP_SPOOK%02d",tdata.HitLine.args[2]-1));
		else if ( (tdata.HitLine.args[2] >= 15) && (tdata.HitLine.args[2] <= 19) )
			mname = StringTable.Localize(String.Format("$SP_SECRET%02d",tdata.HitLine.args[2]-14));
		double ypos;
		if ( SpooktoberGlobals.GetCompletion(tdata.HitLine.args[2]-2) ) ypos = 110.;
		else ypos = 150.;
		int len;
		// format name
		if ( mname.IndexOf(" - by: ") != -1 )
		{
			Array<String> fname;
			mname.Split(fname," - by: ");
			len = titlefont.StringWidth(fname[0]);
			Screen.DrawText(titlefont,Font.CR_RED,(320.-len)/2.,ypos,fname[0],DTA_Bottom320x200,true);
			ypos += titlefont.GetHeight()+2;
			len = authorfont.StringWidth(fname[1]);
			Screen.DrawText(authorfont,Font.CR_WHITE,(320.-len)/2.,ypos,fname[1],DTA_Bottom320x200,true);
			ypos += authorfont.GetHeight()+6;
		}
		else
		{
			len = titlefont.StringWidth(mname);
			Screen.DrawText(titlefont,Font.CR_RED,(320.-len)/2.,ypos,mname,DTA_Bottom320x200,true);
			ypos += titlefont.GetHeight()+6;
		}
		if ( SpooktoberGlobals.GetCompletion(tdata.HitLine.args[2]-2) )
		{
			len = statsfont.StringWidth("[Cleared]");
			Screen.DrawText(statsfont,Font.CR_GOLD,(320.-len)/2.,ypos,"[Cleared]",DTA_Bottom320x200,true);
			ypos += statsfont.GetHeight()+4;
			int maxlen = 0, h1, m1, s1, h2, m2, s2, ki1, ki2, it1, it2, sc1, sc2;
			String ctime, ptime, ckills, citems, csecrets;
			[s1, s2] = SpooktoberGlobals.GetTimes(tdata.HitLine.args[2]-2);
			[ki1, ki2] = SpooktoberGlobals.GetKills(tdata.HitLine.args[2]-2);
			[it1, it2] = SpooktoberGlobals.GetItems(tdata.HitLine.args[2]-2);
			[sc1, sc2] = SpooktoberGlobals.GetSecrets(tdata.HitLine.args[2]-2);
			h1 = s1/3600;
			m1 = (s1%3600)/60;
			s1 = s1%60;
			h2 = s2/3600;
			m2 = (s2%3600)/60;
			s2 = s2%60;
			if ( h1 > 0 ) ctime = String.Format("%02d:%02d:%02d",h1,m1,s1);
			else ctime = String.Format("%02d:%02d",m1,s1);
			if ( h2 > 0 ) ptime = String.Format("%02d:%02d:%02d",h2,m2,s2);
			else ptime = String.Format("%02d:%02d",m2,s2);
			len = statsfont.StringWidth("Time: "..ctime);
			if ( len > maxlen ) maxlen = len;
			len = statsfont.StringWidth("Par: "..ptime);
			if ( len > maxlen ) maxlen = len;
			ckills = String.Format("%d/%d",ki1,ki2);
			len = statsfont.StringWidth("Kills: "..ckills);
			if ( len > maxlen ) maxlen = len;
			citems = String.Format("%d/%d",it1,it2);
			len = statsfont.StringWidth("Items: "..citems);
			if ( len > maxlen ) maxlen = len;
			csecrets = String.Format("%d/%d",sc1,sc2);
			len = statsfont.StringWidth("Secrets: "..csecrets);
			if ( len > maxlen ) maxlen = len;
			Screen.DrawText(statsfont,Font.CR_RED,(320.-maxlen)/2.,ypos,"Time:",DTA_Bottom320x200,true);
			len = statsfont.StringWidth(ctime);
			Screen.DrawText(statsfont,Font.CR_WHITE,(320.+maxlen)/2.-len,ypos,ctime,DTA_Bottom320x200,true);
			ypos += statsfont.GetHeight();
			Screen.DrawText(statsfont,Font.CR_RED,(320.-maxlen)/2.,ypos,"Par:",DTA_Bottom320x200,true);
			len = statsfont.StringWidth(ptime);
			Screen.DrawText(statsfont,Font.CR_WHITE,(320.+maxlen)/2.-len,ypos,ptime,DTA_Bottom320x200,true);
			ypos += statsfont.GetHeight();
			Screen.DrawText(statsfont,Font.CR_RED,(320.-maxlen)/2.,ypos,"Kills:",DTA_Bottom320x200,true);
			len = statsfont.StringWidth(ckills);
			Screen.DrawText(statsfont,Font.CR_WHITE,(320.+maxlen)/2.-len,ypos,ckills,DTA_Bottom320x200,true);
			ypos += statsfont.GetHeight();
			Screen.DrawText(statsfont,Font.CR_RED,(320.-maxlen)/2.,ypos,"Items:",DTA_Bottom320x200,true);
			len = statsfont.StringWidth(citems);
			Screen.DrawText(statsfont,Font.CR_WHITE,(320.+maxlen)/2.-len,ypos,citems,DTA_Bottom320x200,true);
			ypos += statsfont.GetHeight();
			Screen.DrawText(statsfont,Font.CR_RED,(320.-maxlen)/2.,ypos,"Secrets:",DTA_Bottom320x200,true);
			len = statsfont.StringWidth(csecrets);
			Screen.DrawText(statsfont,Font.CR_WHITE,(320.+maxlen)/2.-len,ypos,csecrets,DTA_Bottom320x200,true);
		}
		else
		{
			len = statsfont.StringWidth("[Not cleared]");
			Screen.DrawText(statsfont,Font.CR_BLACK,(320.-len)/2.,ypos,"[Not cleared]",DTA_Bottom320x200,true);
		}
	}

	override void WorldUnloaded( WorldEvent e )
	{
		SpooktoberGlobals.SetCompletion(level.levelnum-2);
		if ( level.levelnum != 1 ) return;
		// adjust player sizes back to normal
		// there's no "PlayerLeft" event so it has to be done here
		for ( int i=0; i<MAXPLAYERS; i++ )
		{
			if ( !playeringame[i] ) continue;
			let mo = players[i].mo;
			let d = GetDefaultByType(mo.GetClass());
			mo.A_SetSize(d.radius,d.height);
			mo.scale = d.scale;
			mo.player.viewheight = mo.viewheight = d.viewheight;
			mo.viewbob = d.viewbob;
		}
	}

	override void PlayerEntered( PlayerEvent e )
	{
		// loadout management
		let mo = players[e.playernumber].mo;
		mo.A_ResetHealth();
		mo.ClearInventory();
		switch ( level.levelnum )
		{
		case 1:
		case 19:
			// you get nothing
			break;
		case 4:
			// scythe instead of fist
			mo.GiveInventory("Scyth",1);
			mo.GiveInventory("Pistol",1);
			mo.SetInventory("Clip",1);
			mo.A_SelectWeapon("Scyth");
			break;
		case 14:
		case 16:
			// fist only
			mo.GiveInventory("Fist",1);
			break;
		default:
			// give start items for player pawn (this allows mod support)
			SpooktoberUtil.GiveStartItems(mo);
			break;
		}
		// footsteps!
		if ( (level.levelnum == 1) || (level.levelnum == 14) || (level.levelnum == 19) )
			mkFootstepMaker.AttachTo(mo);
		if ( level.levelnum != 1 ) return;
		// adjust player size (too lazy to rescale map itself)
		let d = GetDefaultByType(mo.GetClass());
		mo.A_SetSize(d.radius*1.3,d.height*1.4);
		mo.scale = d.scale*1.4;
		mo.player.viewheight = mo.viewheight = 65;
		mo.viewbob = d.viewbob*0.5;
	}

	override void NetworkProcess( ConsoleEvent e )
	{
		if ( !e.IsManual && (e.Name ~== "activateboss") )
		{
			let ai = ActorIterator.Create(13);
			bossenemy = Actor(ai.Next());
			return;
		}
		if ( level.levelnum != 1 ) return;
		if ( e.Name ~== "debug_skipnext" )
		{
			int stage = SpooktoberGlobals.GetStage();
			switch ( stage )
			{
			case 0:
				Cvar.GetCVar('talkedtofirstmonk').SetBool(true);
				SpooktoberGlobals.SetCompletion(0,true);
				SpooktoberGlobals.SetCompletion(1,true);
				SpooktoberGlobals.SetCompletion(2,true);
				break;
			case 1:
				SpooktoberGlobals.SetCompletion(3,true);
				SpooktoberGlobals.SetCompletion(4,true);
				SpooktoberGlobals.SetCompletion(5,true);
				break;
			case 2:
				SpooktoberGlobals.SetCompletion(6,true);
				SpooktoberGlobals.SetCompletion(7,true);
				SpooktoberGlobals.SetCompletion(8,true);
				break;
			case 3:
				SpooktoberGlobals.SetCompletion(9,true);
				SpooktoberGlobals.SetCompletion(10,true);
				SpooktoberGlobals.SetCompletion(11,true);
				break;
			case 4:
				let li = LineIdIterator.Create(305);
				int l;
				if ( ((l = li.Next()) != -1) && level.lines[l].flags&Line.ML_BLOCKEVERYTHING )
					level.ExecuteSpecial(80,null,null,false,201,0,5);
				SpooktoberGlobals.SetCompletion(12,true);
				break;
			}
			level.ExecuteSpecial(80,null,null,false,200);
		}
		else if ( e.Name ~== "debug_skipall" )
		{
			Cvar.GetCVar('talkedtofirstmonk').SetBool(true);
			let g = SpooktoberGlobals.GetInstance();
			int mx = e.Args[0]?18:13;
			for ( int i=0; i<mx; i++ ) g.completion[i] = true;
			for ( int i=0; i<5; i++ ) g.unlocks[i] = true;
			g.stage = 5;
			level.ExecuteSpecial(80,null,null,false,-int('DebugFinish'));
		}
	}

	static void FadeInShader( Actor camera, double speed = 1.0 )
	{
		let hnd = SpooktoberHandler(EventHandler.Find("SpooktoberHandler"));
		if ( !hnd ) return;
		if ( camera && camera.player )
		{
			int n = camera.PlayerNumber();
			hnd.fspeed[n] = speed;
			hnd.fphase[n] = 1;
			hnd.ftic[n] = level.totaltime;
			Shader.SetEnabled(players[n],"blurfade",true);
			return;
		}
		for ( int i=0; i<MAXPLAYERS; i++ )
		{
			if ( !playeringame[i] ) continue;
			hnd.fspeed[i] = speed;
			hnd.fphase[i] = 1;
			hnd.ftic[i] = level.totaltime;
			Shader.SetEnabled(players[i],"blurfade",true);
		}
	}

	static void FadeOutShader( Actor camera, double speed = 1.0 )
	{
		let hnd = SpooktoberHandler(EventHandler.Find("SpooktoberHandler"));
		if ( !hnd ) return;
		if ( camera && camera.player )
		{
			int n = camera.PlayerNumber();
			hnd.fspeed[n] = speed;
			hnd.fphase[n] = 0;
			hnd.ftic[n] = level.totaltime;
			Shader.SetEnabled(players[n],"blurfade",true);
			return;
		}
		for ( int i=0; i<MAXPLAYERS; i++ )
		{
			if ( !playeringame[i] ) continue;
			hnd.fspeed[i] = speed;
			hnd.fphase[i] = 0;
			hnd.ftic[i] = level.totaltime;
			Shader.SetEnabled(players[i],"blurfade",true);
		}
	}

	override void UiTick()
	{
		// replace hud with invisible hud when in the hub
		if ( level.levelnum == 1 )
		{
			if ( StatusBar is 'NullHUD' ) return;
			// set null hud
			let n = new("NullHUD");
			n.oldbar = StatusBar.GetClass();
			StatusBar.Destroy();
			StatusBar = n;
			StatusBar.AttachToPlayer(players[consoleplayer]);
			n.Init();
			StatusBar.NewGame();
		}
		else if ( StatusBar is 'NullHUD' )
		{
			let n = BaseStatusBar(new(NullHUD(StatusBar).oldbar));
			n.Init();
			StatusBar.Destroy();
			StatusBar = n;
			StatusBar.AttachToPlayer(players[consoleplayer]);
			StatusBar.NewGame();
		}
	}
}
