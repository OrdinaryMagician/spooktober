// The big boss
Class mkDialogueSequence39 : mkDialogueSequence
{
	override void DialogueSeq( int state )
	{
		switch( state )
		{
		case 0:
			SetHeader("$BOSSHDR");
			SetTextEffect(TE_SHIVER);
			SetTextSpeed(3);
			SetVoice("misc/bossvoice");
			SetVoiceVolume(1.);
			SetTextColor(Font.CR_BLACK);
			StartText("$BOSSDLG1");
			break;
		case 1:
			StartText("$BOSSDLG2");
			break;
		case 2:
			StartText("$BOSSDLG3");
			break;
		case 3:
			StartText("$BOSSDLG4");
			break;
		case 4:
			StartText("$BOSSDLG5");
			break;
		case 5:
			EventHandler.SendNetworkEvent("activateboss");
			EndSeq(0);
			break;
		}
	}
}

// Souls-style health bar for a boss
Class mkBossHealthBar : HUDMessageBase
{
	String tname;
	Actor target;
	transient font tfont;
	TextureID bbar_r, bbar_d;
	double alpha;
	DynamicValueInterpolator ihealth;
	int thealth, hmax;
	int oldhealth[10];

	mkBossHealthBar Init( Actor target, String tname )
	{
		self.target = target;
		self.tname = tname;
		alpha = 0.0;
		thealth = target.health;
		hmax = target.SpawnHealth();
		ihealth = DynamicValueInterpolator.Create(thealth,0.25,1,max(8,hmax/100));
		for ( int i=0; i<10; i++ ) oldhealth[i] = thealth;
		bbar_r = TexMan.CheckForTexture("bbar_r",TexMan.Type_Any);
		bbar_d = TexMan.CheckForTexture("bbar_d",TexMan.Type_Any);
		return self;
	}

	override bool Tick()
	{
		if ( target )
		{
			thealth = target.health;
			alpha = min(alpha+0.08,1.0);
		}
		else
		{
			thealth = 0;
			alpha = max(alpha-0.02,0.0);
		}
		oldhealth[0] = thealth;
		if ( thealth > oldhealth[9] )
			for ( int i=9; i>0; i-- )
				oldhealth[i] = thealth;
		ihealth.Update(oldhealth[9]);
		for ( int i=9; i>0; i-- )
			oldhealth[i] = oldhealth[i-1];
		return (!target && (alpha<=0.0));
	}

	override void OnDestroy()
	{
		Super.OnDestroy();
		ihealth.Destroy();
	}

	double GetHealth( bool delay = false )
	{
		double hf;
		if ( delay ) hf = clamp(ihealth.GetValue(),0,hmax)/double(hmax);
		else hf = clamp(thealth,0,hmax)/double(hmax);
		return 256*hf;
	}

	override void Draw( int bottom, int visibility )
	{
		if ( !tfont ) tfont = Font.GetFont('STAT_LWR');
		Vector2 pos, sz;
		[pos, sz] = Screen.VirtualToRealCoords((31,15),(258,8),(320,200),true);
		Screen.Dim("Black",alpha*0.75,int(pos.x),int(pos.y),int(sz.x),int(sz.y));
		Screen.DrawText(tfont,Font.CR_RED,(320-tfont.StringWidth(tname))/2,24,tname,DTA_Bottom320x200,true,DTA_Alpha,alpha);
		Screen.DrawTexture(bbar_d,false,32,16,DTA_Bottom320x200,true,DTA_Alpha,alpha*0.5,DTA_DestWidthF,GetHealth(true));
		Screen.DrawTexture(bbar_r,false,32,16,DTA_Bottom320x200,true,DTA_Alpha,alpha,DTA_DestWidthF,GetHealth());
	}
}

Class mkNightmareLord : Actor
{
	int dstage, scnt;

	override void Activate( Actor activator )
	{
		if ( dstage == 0 )
			mkDialogueHandler.StartDialogueSequence(self,activator,39,false,false);
		dstage++;
	}

	// Ideas:
	// Dash towards target when far
	// Teleport to random spot every now and then like D'Sparil
	// Chance for that teleport to be near target
	// Chance to strafe if being aimed at by a player
	action void A_DecideChase()
	{
	}

	// Ideas:
	// Random chance of teleporting to a random spot on pain
	// Small chance that after the teleport, decoys will be summoned
	action void A_TryEvasion()
	{
	}

	// Ideas:
	// Large homing bolt when far away
	// Small bolt barrage
	// Dual homing bolts like IA3 D'Sparil
	// Homing floor hugger blast
	// Rain of sparks
	// Random chance to do a quick charge towards the player for melee
	action void A_DecideRanged()
	{
	}

	// Ideas:
	// Whack 'em with the staff
	// Radius blast with knockback
	// Grab and throw (with magic)
	action void A_DecideMelee()
	{
	}

	// How it'll work
	// Floats upwards for a while, begins emiting sparks and glowing more and more
	// Eventually just pops out of existence with a CORK sfx, only to create a massive,
	// loud blast immediately afterwards
	action void A_Levitate()
	{
	}
	action void A_Spark()
	{
	}
	action void A_Pop()
	{
	}
	action void A_Splode()
	{
	}

	Default
	{
		//$Title Nightmare Lord
		//$Category Marisa Kirisame
		Health 30000;
		Scale 2.0;
		Radius 32;
		Height 140;
		Mass 2000;
		Painchance 32;
		MeleeRange 80;
		Speed 13;
		MONSTER;
		+LOOKALLAROUND;
		+DROPOFF;
		+BOSS;
		+DONTMORPH;
		+NORADIUSDMG;
		+NOTARGET;
		+NOICEDEATH;
		+FLOORCLIP;
		+BOSSDEATH;
		BloodColor "Purple";
		SeeSound "nightmarelord/see";
		PainSound "nightmarelord/pain";
		DeathSound "nightmarelord/death";
		Obituary "%o succumbed to the Nightmare Lord.";
		Tag "$BOSSHDR";
	}
	States
	{
	Spawn:
		NLRD M -1;
		Stop;
	Idle:
		NLRD MMMMMNNNNNN 2 A_Look();
		Loop;
	See:
		NLRD M 0 { invoker.scnt = 0; }
		NLRD MMNNOOPP 3
		{
			scnt++;
			if ( !(scnt%4) )
				A_PlaySound("nightmarelord/step",CHAN_5);
			A_Chase();
			A_DecideChase();
		}
		Loop;
	Pain:
		NLRD Q 3;
		NLRD Q 3 A_Pain();
		NLRD Q 3 A_TryEvasion();
		Goto See;
	Missile:
		NLRD # 1 A_Log("// TODO Boss Ranged Attack");
		Goto See;
	Melee:
		NLRD # 1 A_Log("// TODO Boss Melee Attack");
		Goto See;
	Death:
		NLRD Q 0 A_Log("// TODO Boss Death");
		NLRD Q 140 A_Scream();
		NLRD Q 0 A_NoBlocking();
		Stop;
	}
}
