// Classes for Marisa's maps
Class mkDialogueSequence1 : mkDialogueSequence
{
	override void DialogueSeq( int state )
	{
		switch( state )
		{
		case 0:
			SetHeader("$HUBD_1");
			StartText("$HUBD_11");
			break;
		case 1:
			StartText("$HUBD_12");
			break;
		case 2:
			StartText("$HUBD_13");
			break;
		case 3:
			StartText("$HUBD_14");
			break;
		case 4:
			StartText("$HUBD_15");
			break;
		case 5:
			StartText("$HUBD_16");
			break;
		case 6:
			StartText("$HUBD_17");
			break;
		case 7:
			EventHandler.SendNetworkEvent("talkedtofirstmonk");
			EndSeq(2);
			break;
		}
	}
}

Class mkDialogueSequence2 : mkDialogueSequence
{
	override void DialogueSeq( int state )
	{
		switch( state )
		{
		case 0:
			SetHeader("$HUBD_1");
			StartText("$HUBD_18");
			break;
		case 1:
			EndSeq(2);
			break;
		}
	}
}

Class mkDialogueSequence3 : mkDialogueSequence
{
	override void DialogueSeq( int state )
	{
		switch( state )
		{
		case 0:
			SetHeader("$HUBD_1");
			StartText("$HUBD_19");
			break;
		case 1:
			EndSeq(4);
			break;
		}
	}
}

Class mkDialogueSequence4 : mkDialogueSequence
{
	override void DialogueSeq( int state )
	{
		switch( state )
		{
		case 0:
			SetHeader("$HUBD_1");
			StartText("$HUBD_110");
			break;
		case 1:
			EndSeq(4);
			break;
		}
	}
}

Class mkDialogueSequence5 : mkDialogueSequence
{
	override void DialogueSeq( int state )
	{
		switch( state )
		{
		case 0:
			SetHeader("$HUBD_1");
			StartText("$HUBD_111");
			break;
		case 1:
			EndSeq(6);
			break;
		}
	}
}

Class mkDialogueSequence6 : mkDialogueSequence
{
	override void DialogueSeq( int state )
	{
		switch( state )
		{
		case 0:
			SetHeader("$HUBD_1");
			StartText("$HUBD_112");
			break;
		case 1:
			EndSeq(6);
			break;
		}
	}
}

Class mkDialogueSequence7 : mkDialogueSequence
{
	override void DialogueSeq( int state )
	{
		switch( state )
		{
		case 0:
			SetHeader("$HUBD_1");
			StartText("$HUBD_113");
			break;
		case 1:
			StartText("$HUBD_114");
			break;
		case 2:
			EndSeq(8);
			break;
		}
	}
}

Class mkDialogueSequence8 : mkDialogueSequence
{
	override void DialogueSeq( int state )
	{
		switch( state )
		{
		case 0:
			SetHeader("$HUBD_1");
			StartText("$HUBD_115");
			break;
		case 1:
			EndSeq(8);
			break;
		}
	}
}

Class mkDialogueSequence9 : mkDialogueSequence
{
	override void DialogueSeq( int state )
	{
		switch( state )
		{
		case 0:
			SetHeader("$HUBD_1");
			StartText("$HUBD_116");
			break;
		case 1:
			StartText("$HUBD_117");
			break;
		case 2:
			EventHandler.SendNetworkEvent("movetobasement");
			EndSeq(10);
			break;
		}
	}
}

Class mkDialogueSequence10 : mkDialogueSequence
{
	override void DialogueSeq( int state )
	{
		switch( state )
		{
		case 0:
			SetHeader("$HUBD_1");
			StartText("$HUBD_118");
			break;
		case 1:
			StartText("$HUBD_119");
			break;
		case 2:
			EventHandler.SendNetworkEvent("dispelbosspainting");
			EndSeq(11);
			break;
		}
	}
}

Class mkDialogueSequence11 : mkDialogueSequence
{
	override void DialogueSeq( int state )
	{
		switch( state )
		{
		case 0:
			SetHeader("$HUBD_1");
			StartText("$HUBD_120");
			break;
		case 1:
			EndSeq(11);
			break;
		}
	}
}

Class mkDialogueSequence12 : mkDialogueSequence
{
	override void DialogueSeq( int state )
	{
		switch( state )
		{
		case 0:
			SetHeader("$HUBD_1");
			StartText("$HUBD_121");
			break;
		case 1:
			EndSeq(13);
			break;
		}
	}
}

Class mkDialogueSequence13 : mkDialogueSequence
{
	override void DialogueSeq( int state )
	{
		switch( state )
		{
		case 0:
			SetHeader("$HUBD_1");
			StartText("$HUBD_122");
			break;
		case 1:
			EndSeq(13);
			break;
		}
	}
}

Class mkDialogueSequence14 : mkDialogueSequence
{
	override void DialogueSeq( int state )
	{
		switch( state )
		{
		case 0:
			SetHeader("$HUBD_2");
			StartText("$HUBD_21");
			break;
		case 1:
			EndSeq(15);
			break;
		}
	}
}

Class mkDialogueSequence15 : mkDialogueSequence
{
	override void DialogueSeq( int state )
	{
		switch( state )
		{
		case 0:
			SetHeader("$HUBD_2");
			StartText("$HUBD_22");
			break;
		case 1:
			StartText("$HUBD_23");
			break;
		case 2:
			StartText("$HUBD_24");
			break;
		case 3:
			EndSeq(16);
			break;
		}
	}
}

Class mkDialogueSequence16 : mkDialogueSequence
{
	override void DialogueSeq( int state )
	{
		switch( state )
		{
		case 0:
			SetHeader("$HUBD_2");
			StartText("$HUBD_25");
			break;
		case 1:
			EndSeq(16);
			break;
		}
	}
}

Class mkDialogueSequence17 : mkDialogueSequence
{
	override void DialogueSeq( int state )
	{
		switch( state )
		{
		case 0:
			SetHeader("$HUBD_2");
			StartText("$HUBD_26");
			break;
		case 1:
			StartText("$HUBD_27");
			break;
		case 2:
			EndSeq(18);
			break;
		}
	}
}

Class mkDialogueSequence18 : mkDialogueSequence
{
	override void DialogueSeq( int state )
	{
		switch( state )
		{
		case 0:
			SetHeader("$HUBD_2");
			StartText("$HUBD_28");
			break;
		case 1:
			EndSeq(18);
			break;
		}
	}
}

Class mkDialogueSequence19 : mkDialogueSequence
{
	override void DialogueSeq( int state )
	{
		switch( state )
		{
		case 0:
			SetHeader("$HUBD_2");
			StartText("$HUBD_29");
			break;
		case 1:
			StartText("$HUBD_210");
			break;
		case 2:
			EndSeq(20);
			break;
		}
	}
}

Class mkDialogueSequence20 : mkDialogueSequence
{
	override void DialogueSeq( int state )
	{
		switch( state )
		{
		case 0:
			SetHeader("$HUBD_2");
			StartText("$HUBD_211");
			break;
		case 1:
			EndSeq(20);
			break;
		}
	}
}

Class mkDialogueSequence21 : mkDialogueSequence
{
	override void DialogueSeq( int state )
	{
		switch( state )
		{
		case 0:
			SetHeader("$HUBD_2");
			StartText("$HUBD_212");
			break;
		case 1:
			EndSeq(21);
			break;
		}
	}
}

Class mkDialogueSequence22 : mkDialogueSequence
{
	override void DialogueSeq( int state )
	{
		switch( state )
		{
		case 0:
			SetHeader("$HUBD_2");
			StartText("$HUBD_213");
			break;
		case 1:
			EndSeq(22);
			break;
		}
	}
}

Class mkDialogueSequence23 : mkDialogueSequence
{
	override void DialogueSeq( int state )
	{
		switch( state )
		{
		case 0:
			SetHeader("$HUBD_2");
			StartText("$HUBD_214");
			break;
		case 1:
			EndSeq(23);
			break;
		}
	}
}

Class mkDialogueSequence24 : mkDialogueSequence
{
	override void DialogueSeq( int state )
	{
		switch( state )
		{
		case 0:
			SetHeader("$HUBD_3");
			StartText("$HUBD_31");
			break;
		case 1:
			StartText("$HUBD_32");
			break;
		case 2:
			EndSeq(25);
			break;
		}
	}
}

Class mkDialogueSequence25 : mkDialogueSequence
{
	override void DialogueSeq( int state )
	{
		switch( state )
		{
		case 0:
			SetHeader("$HUBD_3");
			StartText("$HUBD_33");
			break;
		case 1:
			EndSeq(25);
			break;
		}
	}
}

Class mkDialogueSequence26 : mkDialogueSequence
{
	override void DialogueSeq( int state )
	{
		switch( state )
		{
		case 0:
			SetHeader("$HUBD_3");
			StartText("$HUBD_34");
			break;
		case 1:
			EndSeq(27);
			break;
		}
	}
}

Class mkDialogueSequence27 : mkDialogueSequence
{
	override void DialogueSeq( int state )
	{
		switch( state )
		{
		case 0:
			SetHeader("$HUBD_3");
			StartText("$HUBD_35");
			break;
		case 1:
			EndSeq(27);
			break;
		}
	}
}

Class mkDialogueSequence28 : mkDialogueSequence
{
	override void DialogueSeq( int state )
	{
		switch( state )
		{
		case 0:
			SetHeader("$HUBD_3");
			StartText("$HUBD_36");
			break;
		case 1:
			EndSeq(28);
			break;
		}
	}
}

Class mkDialogueSequence29 : mkDialogueSequence
{
	override void DialogueSeq( int state )
	{
		switch( state )
		{
		case 0:
			SetHeader("$HUBD_3");
			StartText("$HUBD_37");
			break;
		case 1:
			EndSeq(29);
			break;
		}
	}
}

Class mkDialogueSequence30 : mkDialogueSequence
{
	override void DialogueSeq( int state )
	{
		switch( state )
		{
		case 0:
			SetHeader("$HUBD_3");
			StartText("$HUBD_38");
			break;
		case 1:
			EndSeq(30);
			break;
		}
	}
}

Class mkDialogueSequence31 : mkDialogueSequence
{
	override void DialogueSeq( int state )
	{
		switch( state )
		{
		case 0:
			SetHeader("$HUBD_4");
			StartText("$HUBD_41");
			break;
		case 1:
			EndSeq(32);
			break;
		}
	}
}

Class mkDialogueSequence32 : mkDialogueSequence
{
	override void DialogueSeq( int state )
	{
		switch( state )
		{
		case 0:
			SetHeader("$HUBD_4");
			StartText("$HUBD_42");
			break;
		case 1:
			EndSeq(32);
			break;
		}
	}
}

Class mkDialogueSequence33 : mkDialogueSequence
{
	override void DialogueSeq( int state )
	{
		switch( state )
		{
		case 0:
			SetHeader("$HUBD_4");
			StartText("$HUBD_43");
			break;
		case 1:
			EndSeq(33);
			break;
		}
	}
}

Class mkDialogueSequence34 : mkDialogueSequence
{
	override void DialogueSeq( int state )
	{
		switch( state )
		{
		case 0:
			SetHeader("$HUBD_4");
			StartText("$HUBD_44");
			break;
		case 1:
			EndSeq(34);
			break;
		}
	}
}

Class mkDialogueSequence35 : mkDialogueSequence
{
	override void DialogueSeq( int state )
	{
		switch( state )
		{
		case 0:
			SetHeader("$HUBD_4");
			StartText("$HUBD_45");
			break;
		case 1:
			SetHeader("$HUBD_4");
			StartText("$HUBD_46");
			break;
		case 2:
			EndSeq(35);
			break;
		}
	}
}

Class mkDialogueSequence36 : mkDialogueSequence
{
	override void DialogueSeq( int state )
	{
		switch( state )
		{
		case 0:
			SetHeader("$HUBD_5");
			SetVoice("");
			StartText("$HUBD_51");
			break;
		case 1:
			EndSeq(36);
			break;
		}
	}
}

Class mkDialogueSequence37 : mkDialogueSequence
{
	override void DialogueSeq( int state )
	{
		switch( state )
		{
		case 0:
			SetHeader("$HUBD_5");
			SetVoice("");
			StartText("$HUBD_52");
			break;
		case 1:
			EndSeq(37);
			break;
		}
	}
}

Class mkDialogueSequence38 : mkDialogueSequence
{
	override void DialogueSeq( int state )
	{
		switch( state )
		{
		case 0:
			SetHeader("$HUBD_5");
			SetVoice("");
			StartText("$HUBD_53");
			break;
		case 1:
			EndSeq(38);
			break;
		}
	}
}

// Base classes of monks tending to the gallery
Class mkMonkBase : Actor abstract
{
	override bool Used( Actor user )
	{
		if ( !score ) return false;
		if ( SpooktoberGlobals.HasTalkedToFirstMonk() && (score == 1) ) score = 2;
		mkDialogueHandler.StartDialogueSequence(self,user,score);
		return true;
	}

	Default
	{
		+SOLID;
		+INTERPOLATEANGLES;
	}
}

Class mkMonk1 : mkMonkBase
{
	Default
	{
		//$Title First Monk
		//$Category Marisa Kirisame
		XScale 1.21;
		YScale 1.26;
		Radius 12;
		Height 72;
		Tag "$HUBD_1";
	}
	States
	{
	Spawn:
		MNK1 A -1;
		Stop;
	}
}
Class mkMonk2 : mkMonkBase
{
	Default
	{
		//$Title Second Monk
		//$Category Marisa Kirisame
		XScale 1.24;
		YScale 1.18;
		Radius 12;
		Height 67;
		Tag "$HUBD_2";
	}
	States
	{
	Spawn:
		MNK2 A -1;
		Stop;
	}
}
Class mkMonk3 : mkMonkBase
{
	Default
	{
		//$Title Third Monk
		//$Category Marisa Kirisame
		XScale 1.43;
		YScale 1.25;
		Radius 14;
		Height 76;
		Tag "$HUBD_3";
	}
	States
	{
	Spawn:
		MNK3 A -1;
		Stop;
	}
}
Class mkMonk4 : mkMonkBase
{
	Default
	{
		//$Title Fourth Monk
		//$Category Marisa Kirisame
		XScale 1.23;
		YScale 1.46;
		Radius 12;
		Height 89;
		Tag "$HUBD_4";
	}
	States
	{
	Spawn:
		MNK4 A -1;
		Stop;
	}
}
Class mkMonk5 : mkMonkBase
{
	Default
	{
		//$Title Fifth Monk
		//$Category Marisa Kirisame
		XScale 1.31;
		YScale 1.28;
		Radius 13;
		Height 78;
		Tag "$HUBD_5";
	}
	States
	{
	Spawn:
		MNK5 A -1;
		Stop;
	}
}

// thinker that plays footsteps for a player
// I could externalize the texture/actor material listings, but I'm lazy
Class mkFootstepMaker : Thinker
{
	PlayerPawn mo;
	bool lastground, init;
	double lastvelz, prevvelz, lastfloorz;

	static void AttachTo( PlayerPawn mo )
	{
		let t = ThinkerIterator.Create("mkFootstepMaker",STAT_USER);
		if ( t.Next() ) return;
		let m = new("mkFootstepMaker");
		m.ChangeStatNum(STAT_USER);
		m.mo = mo;
		m.init = false;
	}

	private int GetFloorMaterial()
	{
		// materials:
		// 0: none
		// 1: carpet
		// 2: dirt/gravel
		// 3: grass
		// 4: metal
		// 5: stone (default)
		// 6: tile
		// 7: wood
		static const String materials[] =
		{
			"1:rug02", "1:rug18", "1:mkThiefSofa",
			"1:mkThiefSofaChair", "1:mkThiefChairOrnate",
			"1:mkThiefBedFancy", "1:b28", "1:rug04", "1:rug28rn",
			"3:plant05",
			"4:floor4",
			"6:tile", "6:ftile3", "6:ftile4", "6:tile_",
			"7:frame3b", "7:palslant", "7:mkThiefChair",
			"7:mkThiefTable",
			"7:mkThiefTableCabinet", "7:mkThiefBarrel",
			"7:mkThiefBox", "7:mkThiefBoxOpen", "7:mkThiefBoxLid",
			"7:mkThiefArmoire", "7:mkThiefStool", "7:mkThiefDesk",
			"7:mkThiefTableFancy1", "7:mkThiefTableFancy2",
			"7:mkThiefFootlocker", "7:frame3", "7:palbasic",
			"7:woodpnl", "7:wdplain", "7:creat2"
		};
		String tx;
		bool dummy;
		Actor onmobj;
		[dummy, onmobj] = mo.TestMobjZ(true);
		if ( onmobj )
		{
			if ( onmobj is 'mkBlockActor' ) return onmobj.Score;
			tx = onmobj.GetClassName();
		}
		else tx = TexMan.GetName(mo.floorpic);
		for ( int i=0; i<materials.size(); i++ )
		{
			String l = materials[i].Left(1), r = materials[i].Mid(2);
			if ( r ~== tx )
				return l.ToInt();
		}
		return 5;
	}

	private void PlayStep( double vol = 1.0 )
	{
		switch ( GetFloorMaterial() )
		{
		case 1:
			mo.A_PlaySound("thief/carpet",CHAN_7,vol);
			break;
		case 2:
			mo.A_PlaySound("thief/dirt",CHAN_7,vol);
			break;
		case 3:
			mo.A_PlaySound("thief/grass",CHAN_7,vol);
			break;
		case 4:
			mo.A_PlaySound("thief/metal",CHAN_7,vol);
			break;
		case 5:
			mo.A_PlaySound("thief/stone",CHAN_7,vol);
			break;
		case 6:
			mo.A_PlaySound("thief/tile",CHAN_7,vol);
			break;
		case 7:
			mo.A_PlaySound("thief/wood",CHAN_7,vol);
			break;
		}
	}
	private void PlayWetStep( double vol = 1.0 )
	{
		mo.A_PlaySound("thief/water",CHAN_7,vol);
	}
	private void PlayLand( double vol = 1.0 )
	{
		switch ( GetFloorMaterial() )
		{
		case 1:
			mo.A_PlaySound("thief/lcarpet",CHAN_6,vol);
			break;
		case 2:
			mo.A_PlaySound("thief/ldirt",CHAN_6,vol);
			break;
		case 3:
			mo.A_PlaySound("thief/lgrass",CHAN_6,vol);
			break;
		case 4:
			mo.A_PlaySound("thief/lmetal",CHAN_6,vol);
			break;
		case 5:
			mo.A_PlaySound("thief/lstone",CHAN_6,vol);
			break;
		case 6:
			mo.A_PlaySound("thief/ltile",CHAN_6,vol);
			break;
		case 7:
			mo.A_PlaySound("thief/lwood",CHAN_6,vol);
			break;
		}
	}
	private void PlayWetLand( double vol = 1.0 )
	{
		mo.A_PlaySound("thief/lwater",CHAN_6,vol);
	}

	override void Tick()
	{
		Super.Tick();
		if ( !mo )
		{
			Destroy();
			return;
		}
		if ( !init )
		{
			init = true;
			lastground = true;
			mo.player.onground = true;
			lastfloorz = mo.floorz;
			return;
		}
		double ang = level.time/(20*TICRATE/35.)*360.;
		bool forcefootstep = false;
		if ( mo.player.onground && !mo.bNoGravity && !lastground && (mo.waterlevel < 3) )
		{
			if ( lastvelz < -4 )
			{
				double vol = clamp(-(lastvelz-4)*0.05,0.01,1.0);
				if ( (mo.waterlevel > 0) || mo.GetFloorTerrain().IsLiquid && !mo.bOnMobj ) PlayWetLand(vol);
				else PlayLand(vol);
			}
			else forcefootstep = true;
		}
		if ( forcefootstep || ((abs(sin(ang)) >= 1.0) && mo.player.onground && lastground && (mo.player.jumptics == 0) && (mo.player.cmd.forwardmove || mo.player.cmd.sidemove) && (mo.waterlevel < 3)) )
		{
			double vol = abs(mo.vel.xy.length())*0.03;
			if ( forcefootstep ) vol = max(vol,clamp(-lastvelz*0.05,0.01,1.0));
			if ( (mo.waterlevel > 0) || mo.GetFloorTerrain().IsLiquid && !mo.bOnMobj ) PlayWetStep(vol);
			else PlayStep(vol);
		}
		lastground = mo.player.onground;
		lastvelz = prevvelz;
		if ( mo.player.onground ) lastfloorz = mo.floorz;
		prevvelz = mo.vel.z;
	}
}

// collision models
// because most thief decorations expect collision boxes to have independent
// width/length, these have to be used to cover the gaps
// Y Scale controls radius and X scale controls height
// (they're in that order because SLADE is a special boy)
// the AMBUSH flag makes them shootable
// the Score property controls the footstep material
// (see above class for reference on materials)
Class mkBlockActor : Actor
{
	Default
	{
		//$Title Invisible Collision
		//$Category Marisa Kirisame
		+SOLID;
		+NOGRAVITY;
		+NODAMAGE;
		+NOBLOOD;
		+ACTLIKEBRIDGE;
		Mass int.max;
		Radius 0.1;
		Height 0;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		A_SetSize(Scale.y,Scale.x);
		bSHOOTABLE = bAMBUSH;
	}
	States
	{
	Spawn:
		TNT1 A -1;
		Stop;
	}
}

// thief decoration models
Class mkThiefSofa : Actor
{
	Default
	{
		//$Title Thief Sofa
		//$Category Marisa Kirisame
		Radius 16;
		Height 16;
		+SOLID;
		+ACTLIKEBRIDGE;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}

Class mkThiefSofaChair : Actor
{
	Default
	{
		//$Title Thief Sofa Chair
		//$Category Marisa Kirisame
		Radius 16;
		Height 16;
		+SOLID;
		+ACTLIKEBRIDGE;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}

Class mkThiefTableCabinet : Actor
{
	Default
	{
		//$Title Thief Table Cabinet
		//$Category Marisa Kirisame
		Radius 16;
		Height 46;
		+SOLID;
		+ACTLIKEBRIDGE;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}

Class mkThiefChair : Actor
{
	Default
	{
		//$Title Thief Chair
		//$Category Marisa Kirisame
		Radius 10;
		Height 18;
		+SOLID;
		+CANPASS;
		+ACTLIKEBRIDGE;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}

Class mkThiefTable : Actor
{
	Default
	{
		//$Title Thief Table
		//$Category Marisa Kirisame
		Radius 32;
		Height 32;
		+SOLID;
		+ACTLIKEBRIDGE;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}

Class mkThiefBarrel : Actor
{
	Default
	{
		//$Title Thief Barrel
		//$Category Marisa Kirisame
		Radius 15;
		Height 50;
		+SOLID;
		+PUSHABLE;
		+CANPASS;
		+ACTLIKEBRIDGE;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}

Class mkThiefChairOrnate : Actor
{
	Default
	{
		//$Title Thief Ornate Chair
		//$Category Marisa Kirisame
		Radius 16;
		Height 16;
		+SOLID;
		+CANPASS;
		+ACTLIKEBRIDGE;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}

Class mkThiefFootlocker : Actor
{
	override void Activate( Actor activator )
	{
		if ( InStateSequence(CurState,FindState("Spawn")) )
			SetStateLabel("Unlock");
		else if ( InStateSequence(CurState,FindState("Unlocked")) )
			SetStateLabel("Open");
	}

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		if ( bAMBUSH ) SetStateLabel("Opened");
	}

	Default
	{
		//$Title Thief Footlocker
		//$Category Marisa Kirisame
		Radius 16;
		Height 16;
		+SOLID;
		+ACTLIKEBRIDGE;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	Unlock:
		MODL A 0;
		MODL ABCDE 4;
	Unlocked:
		MODL E -1;
		Stop;
	Open:
		MODL F 0;
		MODL FGHIJKLMNOP 4;
	Opened:
		MODL P -1;
		Stop;
	}
}

Class mkThiefBox : Actor
{
	Default
	{
		//$Title Thief Box
		//$Category Marisa Kirisame
		Radius 13;
		Height 25;
		+SOLID;
		+PUSHABLE;
		+CANPASS;
		+ACTLIKEBRIDGE;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}

Class mkThiefBoxOpen : Actor
{
	Default
	{
		//$Title Thief Box (Open)
		//$Category Marisa Kirisame
		Radius 13;
		Height 25;
		+SOLID;
		+PUSHABLE;
		+CANPASS;
		+ACTLIKEBRIDGE;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}

Class mkThiefBoxLid : Actor
{
	Default
	{
		//$Title Thief Box (Lid)
		//$Category Marisa Kirisame
		Radius 12;
		Height 1;
		+SOLID;
		+PUSHABLE;
		+CANPASS;
		+ACTLIKEBRIDGE;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}

Class mkThiefArmoire : Actor
{
	Default
	{
		//$Title Thief Armoire
		//$Category Marisa Kirisame
		Radius 16;
		Height 106;
		+SOLID;
		+ACTLIKEBRIDGE;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}

Class mkThiefBrokenVase1 : Actor
{
	Default
	{
		//$Title Thief Broken Vase #1
		//$Category Marisa Kirisame
		Radius 16;
		Height 16;
		-SOLID;
		+CANPASS;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}

Class mkThiefBrokenVase2 : Actor
{
	Default
	{
		//$Title Thief Broken Vase #2
		//$Category Marisa Kirisame
		Radius 16;
		Height 16;
		-SOLID;
		+CANPASS;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}

Class mkThiefBrokenVase3 : Actor
{
	Default
	{
		//$Title Thief Broken Vase #3
		//$Category Marisa Kirisame
		Radius 16;
		Height 16;
		-SOLID;
		+CANPASS;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}

Class mkThiefCandlestick : Actor
{
	Default
	{
		//$Title Thief Candlestick
		//$Category Marisa Kirisame
		Radius 4;
		Height 32;
		-SOLID;
		+CANPASS;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}

Class mkThiefSkull : Actor
{
	Default
	{
		//$Title Thief Skull
		//$Category Marisa Kirisame
		Radius 4;
		Height 8;
		-SOLID;
		+CANPASS;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}

Class mkThiefSkullGold : Actor
{
	Default
	{
		//$Title Thief Skull (Gold)
		//$Category Marisa Kirisame
		Radius 4;
		Height 8;
		-SOLID;
		+CANPASS;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}

Class mkThiefStool : Actor
{
	Default
	{
		//$Title Thief Stool
		//$Category Marisa Kirisame
		Radius 8;
		Height 16;
		+SOLID;
		+CANPASS;
		+ACTLIKEBRIDGE;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}

Class mkThiefDesk : Actor
{
	Default
	{
		//$Title Thief Desk
		//$Category Marisa Kirisame
		Radius 20;
		Height 41;
		+SOLID;
		+ACTLIKEBRIDGE;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}

Class mkThiefBedFancy : Actor
{
	Default
	{
		//$Title Thief Fancy Bed
		//$Category Marisa Kirisame
		Radius 44;
		Height 20;
		+SOLID;
		+ACTLIKEBRIDGE;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}

Class mkThiefTableFancy1 : Actor
{
	Default
	{
		//$Title Thief Fancy Table #1
		//$Category Marisa Kirisame
		Radius 22;
		Height 41;
		+SOLID;
		+ACTLIKEBRIDGE;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}

Class mkThiefTableFancy2 : Actor
{
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		SetState(CurState+clamp(args[0],0,3));
	}
	Default
	{
		//$Title Thief Fancy Table #2
		//$Category Marisa Kirisame
		Radius 22;
		Height 41;
		+SOLID;
		+ACTLIKEBRIDGE;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
		MODL B -1;
		Stop;
		MODL C -1;
		Stop;
		MODL D -1;
		Stop;
	}
}

Class mkThiefCandlestickFancy : Actor
{
	Default
	{
		//$Title Thief Fancy Candlestick
		//$Category Marisa Kirisame
		Radius 4;
		Height 32;
		-SOLID;
		+CANPASS;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}

Class mkThiefGobletFancy1 : Actor
{
	Default
	{
		//$Title Thief Fancy Goblet #1
		//$Category Marisa Kirisame
		Radius 2;
		Height 8;
		-SOLID;
		+CANPASS;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}

Class mkThiefGobletFancy2 : Actor
{
	Default
	{
		//$Title Thief Fancy Goblet #2
		//$Category Marisa Kirisame
		Radius 2;
		Height 8;
		-SOLID;
		+CANPASS;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}

Class mkThiefVaseFancy1 : Actor
{
	Default
	{
		//$Title Thief Fancy Vase #1
		//$Category Marisa Kirisame
		Radius 3;
		Height 8;
		-SOLID;
		+CANPASS;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}

Class mkThiefVaseFancy2 : Actor
{
	Default
	{
		//$Title Thief Fancy Vase #2
		//$Category Marisa Kirisame
		Radius 3;
		Height 8;
		-SOLID;
		+CANPASS;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}

Class mkThiefVaseFancy3 : Actor
{
	Default
	{
		//$Title Thief Fancy Vase #3
		//$Category Marisa Kirisame
		Radius 3;
		Height 8;
		-SOLID;
		+CANPASS;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}

Class mkThiefVaseFancy4 : Actor
{
	Default
	{
		//$Title Thief Fancy Vase #4
		//$Category Marisa Kirisame
		Radius 3;
		Height 8;
		-SOLID;
		+CANPASS;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}

Class mkThiefVial : Actor
{
	Default
	{
		//$Title Thief Vial
		//$Category Marisa Kirisame
		Radius 2;
		Height 6;
		-SOLID;
		+CANPASS;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}

Class mkThiefCthulhu : Actor
{
	Default
	{
		//$Title Thief Cthulhu Statue
		//$Category Marisa Kirisame
		Radius 22;
		Height 128;
		+SOLID;
		+ACTLIKEBRIDGE;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}

Class mkThiefPainting : Actor abstract
{
	Default
	{
		Radius 0.1;
		Height 0;
		+NOGRAVITY;	}
}

Class mkThiefPainting1 : mkThiefPainting
{
	Default
	{
		//$Title Thief Painting #1
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}
Class mkThiefPainting2 : mkThiefPainting
{
	Default
	{
		//$Title Thief Painting #2
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}
Class mkThiefPainting3 : mkThiefPainting
{
	Default
	{
		//$Title Thief Painting #3
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}
Class mkThiefPainting4 : mkThiefPainting
{
	Default
	{
		//$Title Thief Painting #4
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}
Class mkThiefPainting5 : mkThiefPainting
{
	Default
	{
		//$Title Thief Painting #5
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}
Class mkThiefPainting6 : mkThiefPainting
{
	Default
	{
		//$Title Thief Painting #6
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}
Class mkThiefPainting7 : mkThiefPainting
{
	Default
	{
		//$Title Thief Painting #7
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}
Class mkThiefPainting8 : mkThiefPainting
{
	Default
	{
		//$Title Thief Painting #8
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}
Class mkThiefPainting9 : mkThiefPainting
{
	Default
	{
		//$Title Thief Painting #9
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}
Class mkThiefPainting10 : mkThiefPainting
{
	Default
	{
		//$Title Thief Painting #10
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}
Class mkThiefPainting11 : mkThiefPainting
{
	Default
	{
		//$Title Thief Painting #11
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}
Class mkThiefPainting12 : mkThiefPainting
{
	Default
	{
		//$Title Thief Painting #12
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}
Class mkThiefPainting13 : mkThiefPainting
{
	Default
	{
		//$Title Thief Painting #13
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}
Class mkThiefPainting14 : mkThiefPainting
{
	Default
	{
		//$Title Thief Painting #14
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}
Class mkThiefPainting15 : mkThiefPainting
{
	Default
	{
		//$Title Thief Painting #15
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}
Class mkThiefPainting16 : mkThiefPainting
{
	Default
	{
		//$Title Thief Painting #16
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}
Class mkSeacatPainting1 : mkThiefPainting
{
	Default
	{
		//$Title Seacat Painting #1
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}
Class mkSeacatPainting2 : mkThiefPainting
{
	Default
	{
		//$Title Seacat Painting #2
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}
Class mkSilentPainting1 : mkThiefPainting
{
	Default
	{
		//$Title Silent Hill Painting #1
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}
Class mkTimPainting1 : mkThiefPainting
{
	override bool Used( Actor user )
	{
		// check range
		if ( user.pos.z+user.height < pos.z-32*scale.x ) return false;
		if ( user.pos.z > pos.z+32*scale.x ) return false;
		A_PlaySound("tim/grunt",CHAN_VOICE,attenuation:ATTN_NONE);
		if ( bCOUNTSECRET ) level.GiveSecret(user);
		bCOUNTSECRET = false;
		return true;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		A_SetSize(32*scale.x);
	}
	Default
	{
		//$Title Tim Allen Painting #1
		//$Category Marisa Kirisame
		+COUNTSECRET;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}
Class mkAmnesiaPainting1 : mkThiefPainting
{
	override void Activate( Actor activator )
	{
		if ( tracer ) tracer.Activate(activator);
	}

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		tracer = Spawn("mkAmnesiaPainting2",pos);
		tracer.scale = scale;
		tracer.angle = angle;
	}

	Default
	{
		//$Title Amnesia Painting #1
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}
Class mkAmnesiaPainting2 : mkThiefPainting
{
	int tact;
	double talpha;

	override void Activate( Actor activator )
	{
		tact = Random[Amnesia](1,4);
	}
	override void Tick()
	{
		Super.Tick();
		// fade to insanity ver when player is far away
		double dist = Vec3To(players[consoleplayer].mo).length();
		talpha = clamp((dist-250)*0.002,0.0,0.999999);
		if ( tact )
		{
			talpha = min(1.0,talpha+tact/4.);
			tact--;
		}
		alpha = talpha;
	}

	Default
	{
		//$Title Amnesia Painting #2
		//$Category Marisa Kirisame
		RenderStyle "Translucent";
		Alpha 0.0;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}
Class mkSpookPainting1 : mkThiefPainting
{
	Default
	{
		//$Title Spooktime Painting #1
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}
Class mkVigoPainting : mkThiefPainting
{
	Default
	{
		//$Title Vigo the Carpathian Painting
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}

// toggleable lights from 20 heretics
//
// notes: arg0 controls whether they're on at spawn or not

Class mkFireBrazier : SwitchableDecoration
{
	Default
	{
		//$Title Toggleable Fire Brazier
		//$Category Marisa Kirisame
		Radius 16;
		Height 44;
		+SOLID;
	}
	States
	{
	Spawn:
		KFR1 A 0;
		Goto Inactive;
	Active:
		KFR1 A 0
		{
			if ( !args[0] ) A_PlaySound("hexen/ignite",0,0.8);
			args[0] = 0;
			A_PlaySound("thief/firelp",CHAN_BODY,1.0,true,3.0);
		}
		KFR1 ABCDEFGH 3;
		Goto Active+1;
	Inactive:
		KFR1 I 0
		{
			if ( args[0] ) return ResolveState("Active");
			A_StopSound(CHAN_BODY);
			return ResolveState(null);
		}
		KFR1 I -1;
		Stop;
	}
}
Class mkFireBrazier2 : SwitchableDecoration
{
	Default
	{
		//$Title Toggleable Fire Brazier (Flame)
		//$Category Marisa Kirisame
		Radius 16;
		Height 16;
		-SOLID;
	}
	States
	{
	Spawn:
		FFR1 A 0 Bright;
		Goto Inactive;
	Active:
		FFR1 A 0 Bright
		{
			if ( !args[0] ) A_PlaySound("hexen/ignite",0,0.8);
			args[0] = 0;
			A_PlaySound("thief/firelp",CHAN_BODY,1.0,true,3.0);
		}
		FFR1 ABCDEFGH 3 Bright;
		Goto Active+1;
	Inactive:
		TNT1 A 0
		{
			if ( args[0] ) return ResolveState("Active");
			A_StopSound(CHAN_BODY);
			return ResolveState(null);
		}
		TNT1 A -1;
		Stop;
	}
}
Class mkWallTorch : SwitchableDecoration
{
	Default
	{
		//$Title Toggleable Wall Torch
		//$Category Marisa Kirisame
		Radius 6;
		Height 16;
		+NOGRAVITY;
	}
	States
	{
	Spawn:
		WTRH A 0;
		Goto Inactive;
	Active:
		WTRH A 0
		{
			if ( !args[0] ) A_PlaySound("hexen/ignite",0,0.8);
			args[0] = 0;
			A_PlaySound("thief/firelp",CHAN_BODY,0.5,true,4.0);
		}
		WTRH ABC 6;
		Goto Active+1;
	Inactive:
		WTRH D 0
		{
			if ( args[0] ) return ResolveState("Active");
			A_StopSound(CHAN_BODY);
			return ResolveState(null);
		}
		WTRH D -1;
		Stop;
	}
}
Class mkChandelier : SwitchableDecoration
{
	Default
	{
		//$Title Toggleable Chandelier
		//$Category Marisa Kirisame
		Radius 20;
		Height 60;
		+SPAWNCEILING;
		+NOGRAVITY;
	}
	States
	{
	Spawn:
		CHDL A 0;
		Goto Inactive;
	Active:
		CHDL A 0
		{
			if ( !args[0] ) A_PlaySound("hexen/ignite",0,0.1);
			args[0] = 0;
		}
		CHDL ABC 4;
		Goto Active+1;
	Inactive:
		CHDL D 0
		{
			if ( args[0] ) return ResolveState("Active");
			return ResolveState(null);
		}
		CHDL D -1;
		Stop;
	}
}
Class mkBarrierExplLight : DynamicLight
{
	double lifetime;
	Default
	{
		DynamicLight.Type "Point";
		Args 255,0,0,500;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		lifetime = 1.0;
	}
	override void Tick()
	{
		Super.Tick();
		if ( globalfreeze || level.frozen ) return;
		args[LIGHT_RED] = int(255*lifetime);
		lifetime -= 0.02;
		if ( lifetime <= 0 ) Destroy();
	}
}
Class mkBarrier : Actor
{
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		A_PlaySound("thief/egloop",CHAN_BODY,1.0,true,2.0);
	}
	void ParticlePoof()
	{
		FLineTraceData d;
		double distl, distr, distz;
		LineTrace(angle+90,radius,0,TRF_THRUACTORS,8,data:d);
		distr = d.Distance-8.0;
		LineTrace(angle-90,radius,0,TRF_THRUACTORS,8,data:d);
		distl = d.Distance-8.0;
		double minor, major;
		for ( double i=-distl; i<=distr; i+=8.0 )
		{
			// get height at this spot
			LineTrace(angle,height,-90,TRF_THRUACTORS,8,0,i,data:d);
			distz = d.Distance-16;
			for ( double j=8; j<=distz; j+=8.0 )
			{
				Color c = Color(30,0,0)*Random[Barrier](4,8);
				A_SpawnParticle(c,SPF_FULLBRIGHT|SPF_RELATIVE,Random[Barrier](50,70),FRandom[Barrier](8,32),0,0,i+FRandom[Barrier](-2,2),j+FRandom[Barrier](-2,2),FRandom[Barrier](0.4,2.4),FRandom[Barrier](-0.2,0.2),FRandom[Barrier](-0.2,0.2),0,0,0.01,1.0,-1,-0.2);
			}
		}
	}
	override void Activate( Actor activator )
	{
		let li = LineIdIterator.Create(tid);
		int l;
		while ( (l = li.Next()) != -1 )
			level.lines[l].flags |= Line.ML_BLOCKEVERYTHING;
		let ti = ActorIterator.Create(tid+100);
		Actor a;
		while ( a = ti.Next() )
			a.bDORMANT = false;
		A_PlaySound("thief/egloop",CHAN_BODY,1.0,true,2.0);
		SetStateLabel("FadeIn");
	}
	override void Deactivate( Actor activator )
	{
		let li = LineIdIterator.Create(tid);
		int l;
		while ( (l = li.Next()) != -1 )
			level.lines[l].flags &= ~Line.ML_BLOCKEVERYTHING;
		let ti = ActorIterator.Create(tid+100);
		Actor a;
		while ( a = ti.Next() )
		{
			a.bDORMANT = true;
			Spawn("mkBarrierExplLight",a.pos);
		}
		A_StopSound(CHAN_BODY);
		ParticlePoof();
		SetStateLabel("FadeOut");
	}
	Default
	{
		//$Title Barrier FX
		//$Category Marisa Kirisame
		RenderStyle "Add";
		Radius 128;
		Height 256;
		-SOLID;
		+NOGRAVITY;
	}
	States
	{
	Spawn:
		MODL A -1 BRIGHT;
		Stop;
	FadeIn:
		MODL A 1 BRIGHT A_FadeIn(0.05,FTF_CLAMP);
		MODL A 0 BRIGHT A_JumpIf(alpha>=1.0,"Spawn");
		Loop;
	FadeOut:
		MODL A 1 BRIGHT A_FadeOut(0.3,FTF_CLAMP);
		MODL A 0 BRIGHT A_JumpIf(alpha<=0.0,"Spawn");
		Loop;
	}
}
Class mkBarrierTall : mkBarrier
{
	Default
	{
		//$Title Barrier FX (Tall)
		//$Category Marisa Kirisame
		Radius 128;
		Height 1024;
	}
	States
	{
	Spawn:
		MODL A -1 BRIGHT;
		Stop;
	}
}

/*
	notes on buttons/switches:

	AMBUSH flag: reusable
	STANDSTILL flag: starts in the ON position (only for switches)

	some of these execute their specials with a delay

	remember to place them against the surface with a distance of their radius.
*/

Class mkThiefProtrudingBook : Actor
{
	override bool Used( Actor user )
	{
		if ( InStateSequence(CurState,FindState("Activated")) )
		{
			if ( user.player ) user.A_PlaySound("*usefail",CHAN_VOICE,1.0,false,ATTN_IDLE);
			return false;
		}
		A_PlaySound("thief/bookbtn",CHAN_BODY,0.2);
		target = user;
		SetStateLabel("Activated");
		return true;
	}

	Default
	{
		//$Title Thief Protruding Book
		//$Category Marisa Kirisame
		Radius 2;
		Height 16;
		-SOLID;
		+NOGRAVITY;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	Activated:
		MODL A 10;
		MODL B 3
		{
			A_PlaySound("thief/button");
			level.ExecuteSpecial(special,target,null,false,args[0],args[1],args[2],args[3],args[4]);
			if ( !bAMBUSH ) A_SetTics(-1);
		}
		MODL B 15;
		MODL A 0;
		Goto Spawn;
	}
}

Class mkThiefButton : Actor
{
	override bool Used( Actor user )
	{
		if ( InStateSequence(CurState,FindState("Activated")) )
		{
			if ( user.player ) user.A_PlaySound("*usefail",CHAN_VOICE,1.0,false,ATTN_IDLE);
			return false;
		}
		target = user;
		SetStateLabel("Activated");
		return true;
	}

	Default
	{
		//$Title Thief Button
		//$Category Marisa Kirisame
		Radius 4;
		Height 8;
		-SOLID;
		+NOGRAVITY;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	Activated:
		MODL A 5;
		MODL B 3
		{
			A_PlaySound("thief/button");
			level.ExecuteSpecial(special,target,null,false,args[0],args[1],args[2],args[3],args[4]);
			if ( !bAMBUSH ) A_SetTics(-1);
		}
		MODL B 10;
		MODL A 0;
		Goto Spawn;
	}
}

Class mkThiefSwitch : Actor
{
	override bool Used( Actor user )
	{
		if ( InStateSequence(CurState,FindState("Activated")) || InStateSequence(CurState,FindState("Activated2")) )
		{
			if ( user.player ) user.A_PlaySound("*usefail",CHAN_VOICE,1.0,false,ATTN_IDLE);
			return false;
		}
		A_PlaySound("thief/switch");
		target = user;
		if ( InStateSequence(CurState,FindState("Spawn")) ) SetStateLabel("Activated");
		else SetStateLabel("Activated2");
		return true;
	}

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		if ( bSTANDSTILL ) SetStateLabel("Spawn2");
	}

	Default
	{
		//$Title Thief Switch
		//$Category Marisa Kirisame
		Radius 8;
		Height 16;
		-SOLID;
		+NOGRAVITY;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	Spawn2:
		MODL B -1;
		Stop;
	Activated:
		MODL A 10;
		MODL B 0
		{
			level.ExecuteSpecial(special,target,null,false,args[0],args[1],args[2],args[3],args[4]);
			if ( bAMBUSH ) return ResolveState("Spawn2");
			A_SetTics(-1);
			return ResolveState(null);
		}
		Stop;
	Activated2:
		MODL B 10;
		MODL A 0
		{
			level.ExecuteSpecial(special,target,null,false,args[0],args[1],args[2],args[3],args[4]);
		}
		Goto Spawn;
	}
}

Class mkThiefSwitchBlank : mkThiefSwitch
{
	Default
	{
		//$Title Thief Switch (Blank)
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	Spawn2:
		MODL B -1;
		Stop;
	Activated:
		MODL A 10;
		MODL B 0
		{
			level.ExecuteSpecial(special,target,null,false,args[0],args[1],args[2],args[3],args[4]);
			if ( bAMBUSH ) return ResolveState("Spawn2");
			A_SetTics(-1);
			return ResolveState(null);
		}
		Stop;
	Activated2:
		MODL B 10;
		MODL A 0
		{
			level.ExecuteSpecial(special,target,null,false,args[0],args[1],args[2],args[3],args[4]);
		}
		Goto Spawn;
	}
}

Class mkThiefSwitchArc : Actor
{
	override bool Used( Actor user )
	{
		if ( InStateSequence(CurState,FindState("Activated")) || InStateSequence(CurState,FindState("Activated2")) )
		{
			if ( user.player ) user.A_PlaySound("*usefail",CHAN_VOICE,1.0,false,ATTN_IDLE);
			return false;
		}
		A_PlaySound("thief/swsmall");
		target = user;
		if ( CurState == FindState("Spawn") ) SetStateLabel("Activated");
		else SetStateLabel("Activated2");
		return true;
	}

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		if ( bSTANDSTILL ) SetStateLabel("Spawn2");
	}

	Default
	{
		//$Title Thief Switch (Arc)
		//$Category Marisa Kirisame
		Radius 8;
		Height 16;
		-SOLID;
		+NOGRAVITY;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	Spawn2:
		MODL J -1;
		Stop;
	Activated:
		MODL ABCDEFGHIJ 1;
		MODL J 0
		{
			level.ExecuteSpecial(special,target,null,false,args[0],args[1],args[2],args[3],args[4]);
			if ( bAMBUSH ) return ResolveState("Spawn2");
			A_SetTics(-1);
			return ResolveState(null);
		}
		Stop;
	Activated2:
		MODL JIHGFEDCBA 1;
		MODL A 0
		{
			level.ExecuteSpecial(special,target,null,false,args[0],args[1],args[2],args[3],args[4]);
		}
		Goto Spawn;
	}
}

Class mkThiefSwitchArcBlank : mkThiefSwitchArc
{
	Default
	{
		//$Title Thief Switch (Arc, Blank)
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	Spawn2:
		MODL J -1;
		Stop;
	Activated:
		MODL ABCDEFGHIJ 1;
		MODL J 0
		{
			level.ExecuteSpecial(special,target,null,false,args[0],args[1],args[2],args[3],args[4]);
			if ( bAMBUSH ) return ResolveState("Spawn2");
			A_SetTics(-1);
			return ResolveState(null);
		}
		Stop;
	Activated2:
		MODL JIHGFEDCBA 1;
		MODL A 0
		{
			level.ExecuteSpecial(special,target,null,false,args[0],args[1],args[2],args[3],args[4]);
		}
		Goto Spawn;
	}
}

Class mkThiefSwitchThrow : Actor
{
	override bool Used( Actor user )
	{
		if ( InStateSequence(CurState,FindState("Activated")) || InStateSequence(CurState,FindState("Activated2")) )
		{
			if ( user.player ) user.A_PlaySound("*usefail",CHAN_VOICE,1.0,false,ATTN_IDLE);
			return false;
		}
		target = user;
		if ( InStateSequence(CurState,FindState("Spawn")) )
		{
			A_PlaySound("thief/swthrow1");
			SetStateLabel("Activated");
		}
		else
		{
			A_PlaySound("thief/swthrow2");
			SetStateLabel("Activated2");
		}
		return true;
	}

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		if ( bSTANDSTILL ) SetStateLabel("Spawn2");
	}

	Default
	{
		//$Title Thief Switch (Throw)
		//$Category Marisa Kirisame
		Radius 8;
		Height 16;
		-SOLID;
		+NOGRAVITY;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	Spawn2:
		MODL J -1;
		Stop;
	Activated:
		MODL ABCDEFGHIJ 1;
		MODL J 0
		{
			level.ExecuteSpecial(special,target,null,false,args[0],args[1],args[2],args[3],args[4]);
			if ( bAMBUSH ) return ResolveState("Spawn2");
			A_SetTics(-1);
			return ResolveState(null);
		}
		Stop;
	Activated2:
		MODL J 0
		{
			level.ExecuteSpecial(special,target,null,false,args[0],args[1],args[2],args[3],args[4]);
		}
		MODL JIHGFEDCBA 1;
		MODL A 0;
		Goto Spawn;
	}
}

Class mkThiefSwitchWheel : Actor
{
	override bool Used( Actor user )
	{
		if ( InStateSequence(CurState,FindState("Activated")) || InStateSequence(CurState,FindState("Activated2")) )
		{
			if ( user.player ) user.A_PlaySound("*usefail",CHAN_VOICE,1.0,false,ATTN_IDLE);
			return false;
		}
		A_PlaySound("thief/swsmall");
		target = user;
		if ( InStateSequence(CurState,FindState("Spawn")) ) SetStateLabel("Activated");
		else SetStateLabel("Activated2");
		return true;
	}

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		if ( bSTANDSTILL ) SetStateLabel("Spawn2");
	}

	Default
	{
		//$Title Thief Switch (Wheel)
		//$Category Marisa Kirisame
		Radius 8;
		Height 16;
		-SOLID;
		+NOGRAVITY;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	Spawn2:
		MODL A -1;
		Stop;
	Activated:
		MODL ABCDEFGHIJKLMNOPQRSTA 1;
		MODL A 0
		{
			level.ExecuteSpecial(special,target,null,false,args[0],args[1],args[2],args[3],args[4]);
			if ( bAMBUSH ) return ResolveState("Spawn2");
			A_SetTics(-1);
			return ResolveState(null);
		}
		Stop;
	Activated2:
		MODL ATSRQPONMLKJIHGFEDCBA 1;
		MODL A 0
		{
			level.ExecuteSpecial(special,target,null,false,args[0],args[1],args[2],args[3],args[4]);
		}
		Goto Spawn;
	}
}

Class mkMirrorMan : Actor
{
	bool bActive;
	int cdown;

	override void Activate( Actor activator )
	{
		bActive = true;
		SetStateLabel("Active");
	}

	override void Deactivate( Actor activator )
	{
		bActive = false;
		SetStateLabel("Spawn");
	}

	private bool ConsoleplayerOut()
	{
		let mo = players[consoleplayer].mo;
		return !CheckSight(mo);
	}

	private bool InConsoleplayerLOS()
	{
		let mo = players[consoleplayer].mo;
		Vector3 sc = level.SphericalCoords(mo.pos,pos,(mo.angle,mo.pitch));
		return (abs(sc.x)<90)||(abs(sc.y)>60);
	}

	override void Tick()
	{
		Super.Tick();
		// become invisible if active and seen by consoleplayer
		if ( !bActive || ConsoleplayerOut() || InConsoleplayerLOS() ) alpha = max(alpha-0.16,0.0);
		else
		{
			if ( cdown-- < 0 )
			{
				cdown = Random[MirrorMan](90,280);
				if ( !Random[MirrorMan](0,3) )
					A_PlaySound("misc/lka",CHAN_VOICE);
			}
			alpha = min(alpha+0.08,1.0);
		}
		A_SoundVolume(CHAN_VOICE,alpha);
	}

	Default
	{
		//$Title Mirror Man
		//$Category Marisa Kirisame
		RenderStyle "Translucent";
		Scale 0.17;
		-SOLID;
		+NOGRAVITY;
	}

	States
	{
	Spawn:
		TNT1 A -1;
		Stop;
	Active:
		MRMN A -1;
		Stop;
	}
}

// A spooky thing
Class mkLookAtMe : Actor
{
	private bool InConsoleplayerLOS( Actor a )
	{
		double vfov = CVar.GetCVar('fov',players[consoleplayer]).GetFloat()*0.5;
		double hfov = atan(Screen.GetAspectRatio()*tan(vfov));
		let mo = players[consoleplayer].mo;
		Vector3 ppos = mo.Vec2OffsetZ(0,0,mo.player.viewz);
		Vector3 tpos = a.Vec3Offset(0,0,a.height*0.5);
		Vector3 sc = level.SphericalCoords(ppos,tpos,(mo.angle,mo.pitch));
		return ((abs(sc.x)<hfov)&&(abs(sc.y)<vfov));
	}

	override void Tick()
	{
		Super.Tick();
		let ai = ActorIterator.Create(args[0]);
		Actor a;
		while ( a = ai.Next() )
		{
			// can the consoleplayer see it?
			if ( InConsoleplayerLOS(a) ) continue;
			a.angle = a.AngleTo(players[consoleplayer].mo);
		}
	}

	Default
	{
		//$Title Look At Me
		//$Category Marisa Kirisame
		+NOBLOCKMAP;
		+NOGRAVITY;
		+DONTSPLASH;
	}
}

// SPOOK13 Skybox things
Class mkFloatingIsland : Actor
{
	Vector3 anchorpos;
	double aphase, aspeed, aamp;

	Default
	{
		//$Title Floating Island
		//$Category Marisa Kirisame
		+NOBLOCKMAP;
		+NOGRAVITY;
		+DONTSPLASH;
		+FORCEXYBILLBOARD;
		Scale 0.4;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		anchorpos = pos;
		aphase = FRandom[Island](-16,16);
		aspeed = FRandom[Island](0.3,0.9);
		aamp = FRandom[Island](8.0,12.0);
		SetState(FindState("Spawn")+Random[Island](0,10));
		Scale += (FRandom[Island](-0.1,0.1),FRandom[Island](-0.1,0.1));
		Scale *= FRandom[Island](0.8,1.2);
	}
	override void Tick()
	{
		Super.Tick();
		SetOrigin(anchorpos+(0,0,sin((level.totaltime+aphase)*aspeed)*aamp),true);
	}
	States
	{
	Spawn:
		FISL ABCDEFGHIJK -1;
		Stop;
	}
}

Class mkTopFlare : Actor
{
	Default
	{
		//$Title Top Flare
		//$Category Marisa Kirisame
		RenderStyle "Add";
		Scale 1.2;
		Alpha 0.5;
		+NOBLOCKMAP;
		+NOGRAVITY;
		+DONTSPLASH;
		+ROLLSPRITE;
		+ROLLCENTER;
		+FLATSPRITE;
		+INTERPOLATEANGLES;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		let l = Spawn("mkTopFlare2",pos+(0,0,1));
		l.ChangeTid(tid);
		Spawn("mkBottomFlare",(pos.x,pos.y,4));
	}
	override void Tick()
	{
		Super.Tick();
		roll += 0.3;
		A_SetScale(1.2+sin(level.totaltime*0.1)*0.4);
	}
	States
	{
	Spawn:
		TFLR A -1;
		Stop;
	}
}

Class mkTopFlare2 : Actor
{
	Default
	{
		RenderStyle "Add";
		Scale 1.2;
		Alpha 0.5;
		+NOBLOCKMAP;
		+NOGRAVITY;
		+DONTSPLASH;
		+ROLLSPRITE;
		+ROLLCENTER;
		+FLATSPRITE;
		+INTERPOLATEANGLES;
	}
	override void Tick()
	{
		Super.Tick();
		roll -= 0.2;
		A_SetScale(1.2+cos(level.totaltime*0.1)*0.4);
	}
	States
	{
	Spawn:
		TFLR B -1;
		Stop;
	}
}

Class mkBottomFlare : Actor
{
	Default
	{
		Scale 3.0;
		+NOBLOCKMAP;
		+NOGRAVITY;
		+DONTSPLASH;
		+ROLLSPRITE;
		+ROLLCENTER;
		+FLATSPRITE;
		+INTERPOLATEANGLES;
	}
	override void Tick()
	{
		Super.Tick();
		roll -= 0.1;
		A_SetScale(1.8+cos(level.totaltime*0.1)*0.3);
	}
	States
	{
	Spawn:
		TFLR C -1;
		Stop;
	}
}

Class mkDimCube : Actor
{
	Default
	{
		//$Title Dim Cube
		//$Category Marisa Kirisame
		RenderStyle "Translucent";
		Alpha 0.0;
		Radius 32;
		Height 32;
		+NOBLOCKMAP;
		+NOGRAVITY;
		+DONTSPLASH;
	}
	States
	{
	Spawn:
		MODL A -1 Bright;
		Stop;
	}
}
