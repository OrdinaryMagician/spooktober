// Classes for SPOOKHUB and SPOOK13

// Base classe of monks tending to the gallery
Class mkMonkBase : Actor abstract
{
	override bool Used( Actor user )
	{
		if ( !score ) return false;
		if ( SpooktoberGlobals.HasTalkedToFirstMonk() && (score == 1) ) score = 2;
		mkDialogueHandler.StartDialogueSequence(self,user,score);
		return true;
	}

	Default
	{
		+SOLID;
		Radius 12;
		Height 72;
	}
}

Class mkMonk1 : mkMonkBase
{
	Default
	{
		//$Title First Monk
		//$Category Marisa Kirisame
		XScale 1.21;
		YScale 1.26;
	}
	States
	{
	Spawn:
		MNK1 A -1;
		Stop;
	}
}
Class mkMonk2 : mkMonkBase
{
	Default
	{
		//$Title Second Monk
		//$Category Marisa Kirisame
		XScale 1.24;
		YScale 1.18;
	}
	States
	{
	Spawn:
		MNK2 A -1;
		Stop;
	}
}
Class mkMonk3 : mkMonkBase
{
	Default
	{
		//$Title Third Monk
		//$Category Marisa Kirisame
		XScale 1.43;
		YScale 1.25;
	}
	States
	{
	Spawn:
		MNK3 A -1;
		Stop;
	}
}
Class mkMonk4 : mkMonkBase
{
	Default
	{
		//$Title Fourth Monk
		//$Category Marisa Kirisame
		XScale 1.23;
		YScale 1.46;
	}
	States
	{
	Spawn:
		MNK4 A -1;
		Stop;
	}
}
Class mkMonk5 : mkMonkBase
{
	Default
	{
		//$Title Fifth Monk
		//$Category Marisa Kirisame
		XScale 1.31;
		YScale 1.28;
	}
	States
	{
	Spawn:
		MNK5 A -1;
		Stop;
	}
}

Class mkFootstepMaker : Thinker
{
	PlayerPawn mo;
	bool lastground, init;
	double lastvelz, prevvelz;

	static void AttachTo( PlayerPawn mo )
	{
		let t = ThinkerIterator.Create("mkFootstepMaker",STAT_USER);
		if ( t.Next() ) return;
		let m = new("mkFootstepMaker");
		m.ChangeStatNum(STAT_USER);
		m.mo = mo;
		m.init = false;
	}

	private int GetFloorMaterial()
	{
		static const String materials[] =
		{
			"1:rug02", "1:rug02a",
			"1:mkThiefSofa", "1:mkThiefSofaChair",
			"1:mkThiefChairOrnate",
			"4:floor4",
			"5:rufgry", "5:dunfloor",
			"7:frame3b", "7:palslant",
			"7:mkThiefChair", "7:mkThiefTable",
			"7:mkThiefTableCabinet", "7:mkThiefBarrel"
		};
		String tx;
		bool dummy;
		Actor onmobj;
		[dummy, onmobj] = mo.TestMobjZ(true);
		if ( onmobj )
		{
			if ( onmobj is 'mkBlockActor' ) return onmobj.Score;
			tx = onmobj.GetClassName();
		}
		else tx = TexMan.GetName(mo.floorpic);
		for ( int i=0; i<materials.size(); i++ )
		{
			String l = materials[i].Left(1), r = materials[i].Mid(2);
			if ( r ~== tx )
				return l.ToInt();
		}
		return 5;
	}

	private void PlayStep( double vol = 1.0 )
	{
		switch ( GetFloorMaterial() )
		{
		case 1:
			mo.A_PlaySound("thief/carpet",CHAN_7,vol);
			break;
		case 2:
			mo.A_PlaySound("thief/dirt",CHAN_7,vol);
			break;
		case 3:
			mo.A_PlaySound("thief/grass",CHAN_7,vol);
			break;
		case 4:
			mo.A_PlaySound("thief/metal",CHAN_7,vol);
			break;
		case 5:
			mo.A_PlaySound("thief/stone",CHAN_7,vol);
			break;
		case 6:
			mo.A_PlaySound("thief/tile",CHAN_7,vol);
			break;
		case 7:
			mo.A_PlaySound("thief/wood",CHAN_7,vol);
			break;
		}
	}
	private void PlayWetStep( double vol = 1.0 )
	{
	}
	private void PlayLand( double vol = 1.0 )
	{
		switch ( GetFloorMaterial() )
		{
		case 1:
			mo.A_PlaySound("thief/lcarpet",CHAN_6,vol);
			break;
		case 2:
			mo.A_PlaySound("thief/ldirt",CHAN_6,vol);
			break;
		case 3:
			mo.A_PlaySound("thief/lgrass",CHAN_6,vol);
			break;
		case 4:
			mo.A_PlaySound("thief/lmetal",CHAN_6,vol);
			break;
		case 5:
			mo.A_PlaySound("thief/lstone",CHAN_6,vol);
			break;
		case 6:
			mo.A_PlaySound("thief/ltile",CHAN_6,vol);
			break;
		case 7:
			mo.A_PlaySound("thief/lwood",CHAN_6,vol);
			break;
		}
	}
	private void PlayWetLand( double vol = 1.0 )
	{
	}

	override void Tick()
	{
		Super.Tick();
		if ( !mo )
		{
			Destroy();
			return;
		}
		if ( !init )
		{
			init = true;
			lastground = true;
			mo.player.onground = true;
			return;
		}
		double ang = level.time/(20*TICRATE/35.)*360.;
		if ( mo.player.onground && !mo.bNoGravity && !lastground && (mo.waterlevel < 3) )
		{
			double vol = clamp(-(lastvelz-8)*0.05,0.01,1.0);
			if ( (mo.waterlevel > 0) || mo.GetFloorTerrain().IsLiquid && !mo.bOnMobj ) PlayWetLand(vol);
			else PlayLand(vol);
		}
		if ( (abs(sin(ang)) >= 1.0) && mo.player.onground && lastground && (mo.player.jumptics == 0) && (mo.player.cmd.forwardmove || mo.player.cmd.sidemove) && (mo.waterlevel < 3) )
		{
			double vol = abs(mo.vel.xy.length())*0.03;
			if ( (mo.waterlevel > 0) || mo.GetFloorTerrain().IsLiquid && !mo.bOnMobj ) PlayWetStep(vol);
			else PlayStep(vol);
		}
		lastground = mo.player.onground;
		lastvelz = prevvelz;
		prevvelz = mo.vel.z;
	}
}

// collision models
Class mkBlockActor : Actor
{
	Default
	{
		//$Title Invisible Collision
		//$Category Marisa Kirisame
		+SOLID;
		+NOGRAVITY;
		+NODAMAGE;
		+NOBLOOD;
		Mass int.max;
		Radius 0.1;
		Height 0;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		A_SetSize(Scale.y,Scale.x);
		bSHOOTABLE = bAMBUSH;
	}
	States
	{
	Spawn:
		TNT1 A -1;
		Stop;
	}
}

// thief decoration models
Class mkThiefSofa : Actor
{
	Default
	{
		//$Title Thief Sofa
		//$Category Marisa Kirisame
		Radius 16;
		Height 16;
		+SOLID;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}

Class mkThiefSofaChair : Actor
{
	Default
	{
		//$Title Thief Sofa Chair
		//$Category Marisa Kirisame
		Radius 16;
		Height 16;
		+SOLID;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}

Class mkThiefTableCabinet : Actor
{
	Default
	{
		//$Title Thief Table Cabinet
		//$Category Marisa Kirisame
		Radius 16;
		Height 48;
		+SOLID;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}

Class mkThiefChair : Actor
{
	Default
	{
		//$Title Thief Chair
		//$Category Marisa Kirisame
		Radius 10;
		Height 18;
		+SOLID;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}

Class mkThiefTable : Actor
{
	Default
	{
		//$Title Thief Table
		//$Category Marisa Kirisame
		Radius 32;
		Height 32;
		+SOLID;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}

Class mkThiefBarrel : Actor
{
	Default
	{
		//$Title Thief Barrel
		//$Category Marisa Kirisame
		Radius 16;
		Height 48;
		+SOLID;
		+PUSHABLE;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}

Class mkThiefChairOrnate : Actor
{
	Default
	{
		//$Title Thief Ornate Chair
		//$Category Marisa Kirisame
		Radius 16;
		Height 16;
		+SOLID;
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}

Class mkThiefPainting : Actor abstract
{
	Default
	{
		Radius 0.1;
		Height 0;
		+NOGRAVITY;	}
}

Class mkThiefPainting1 : mkThiefPainting
{
	Default
	{
		//$Title Thief Painting #1
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}
Class mkThiefPainting2 : mkThiefPainting
{
	Default
	{
		//$Title Thief Painting #2
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}
Class mkThiefPainting3 : mkThiefPainting
{
	Default
	{
		//$Title Thief Painting #3
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}
Class mkThiefPainting4 : mkThiefPainting
{
	Default
	{
		//$Title Thief Painting #4
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}
Class mkThiefPainting5 : mkThiefPainting
{
	Default
	{
		//$Title Thief Painting #5
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}
Class mkThiefPainting6 : mkThiefPainting
{
	Default
	{
		//$Title Thief Painting #6
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}
Class mkThiefPainting7 : mkThiefPainting
{
	Default
	{
		//$Title Thief Painting #7
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}
Class mkThiefPainting8 : mkThiefPainting
{
	Default
	{
		//$Title Thief Painting #8
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}
Class mkThiefPainting9 : mkThiefPainting
{
	Default
	{
		//$Title Thief Painting #9
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}
Class mkThiefPainting10 : mkThiefPainting
{
	Default
	{
		//$Title Thief Painting #10
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}
Class mkThiefPainting11 : mkThiefPainting
{
	Default
	{
		//$Title Thief Painting #11
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}
Class mkThiefPainting12 : mkThiefPainting
{
	Default
	{
		//$Title Thief Painting #12
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}
Class mkThiefPainting13 : mkThiefPainting
{
	Default
	{
		//$Title Thief Painting #13
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}
Class mkThiefPainting14 : mkThiefPainting
{
	Default
	{
		//$Title Thief Painting #14
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}
Class mkThiefPainting15 : mkThiefPainting
{
	Default
	{
		//$Title Thief Painting #15
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}
Class mkThiefPainting16 : mkThiefPainting
{
	Default
	{
		//$Title Thief Painting #16
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}
Class mkSeacatPainting1 : mkThiefPainting
{
	Default
	{
		//$Title Seacat Painting #1
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}
Class mkSeacatPainting2 : mkThiefPainting
{
	Default
	{
		//$Title Seacat Painting #2
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}
Class mkSilentPainting1 : mkThiefPainting
{
	Default
	{
		//$Title Silent Hill Painting #1
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}
Class mkTimPainting1 : mkThiefPainting
{
	Default
	{
		//$Title Tim Allen Painting #1
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}
Class mkAmnesiaPainting1 : mkThiefPainting
{
	Default
	{
		//$Title Amnesia Painting #1
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}
Class mkAmnesiaPainting2 : mkThiefPainting
{
	Default
	{
		//$Title Amnesia Painting #2
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}
Class mkSpookPainting1 : mkThiefPainting
{
	Default
	{
		//$Title Spooktime Painting #1
		//$Category Marisa Kirisame
	}
	States
	{
	Spawn:
		MODL A -1;
		Stop;
	}
}

// toggleable lights from 20 heretics
Class mkFireBrazier : SwitchableDecoration
{
	Default
	{
		//$Title Toggleable Fire Brazier
		//$Category Marisa Kirisame
		Radius 16;
		Height 44;
		+SOLID;
	}
	States
	{
	Spawn:
		KFR1 A 0;
		Goto Inactive;
	Active:
		KFR1 A 0
		{
			if ( !args[0] ) A_PlaySound("hexen/ignite",0,0.8);
			args[0] = 0;
			A_PlaySound("thief/firelp",CHAN_BODY,1.0,true,3.0);
		}
		KFR1 ABCDEFGH 3;
		Goto Active+1;
	Inactive:
		KFR1 I 0
		{
			if ( args[0] ) return ResolveState("Active");
			A_StopSound(CHAN_BODY);
			return ResolveState(null);
		}
		KFR1 I -1;
		Stop;
	}
}
Class mkWallTorch : SwitchableDecoration
{
	Default
	{
		//$Title Toggleable Wall Torch
		//$Category Marisa Kirisame
		Radius 6;
		Height 16;
		+NOGRAVITY;
	}
	States
	{
	Spawn:
		WTRH A 0;
		Goto Inactive;
	Active:
		WTRH A 0
		{
			if ( !args[0] ) A_PlaySound("hexen/ignite",0,0.8);
			args[0] = 0;
			A_PlaySound("thief/firelp",CHAN_BODY,0.5,true,4.0);
		}
		WTRH ABC 6;
		Goto Active+1;
	Inactive:
		WTRH D 0
		{
			if ( args[0] ) return ResolveState("Active");
			A_StopSound(CHAN_BODY);
			return ResolveState(null);
		}
		WTRH D -1;
		Stop;
	}
}
Class mkChandelier : SwitchableDecoration
{
	Default
	{
		//$Title Toggleable Chandelier
		//$Category Marisa Kirisame
		Radius 20;
		Height 60;
		+SPAWNCEILING;
		+NOGRAVITY;
	}
	States
	{
	Spawn:
		CHDL A 0;
		Goto Inactive;
	Active:
		CHDL A 0
		{
			if ( !args[0] ) A_PlaySound("hexen/ignite",0,0.1);
			args[0] = 0;
		}
		CHDL ABC 4;
		Goto Active+1;
	Inactive:
		CHDL D 0
		{
			if ( args[0] ) return ResolveState("Active");
			return ResolveState(null);
		}
		CHDL D -1;
		Stop;
	}
}
