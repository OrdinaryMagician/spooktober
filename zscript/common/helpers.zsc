// Useful shared code
Class SpooktoberUtil abstract play
{
	static void SetLineLight( int tag, int brightness, bool absolute = false )
	{
		let l = LineIdIterator.Create(tag);
		int i;
		while ( (i = l.Next()) != -1 )
		{
			for ( int j=0; j<2; j++ )
			{
				if ( !level.lines[i].sidedef[j] ) continue;
				level.lines[i].sidedef[0].light = brightness;
				if ( absolute ) level.lines[i].sidedef[0].flags |= Side.WALLF_ABSLIGHTING;
				else level.lines[i].sidedef[0].flags &= ~Side.WALLF_ABSLIGHTING;
			}
		}
	}

	static void DoorMove( Actor whom, int angle )
	{
		if ( !whom ) return;
		Vector2 movedir = Actor.RotateVector((128,0),angle);
		whom.SetOrigin(whom.Vec3Offset(movedir.x,movedir.y,0),false);
		whom.angle = angle;
		whom.pitch = 0;
	}

	static void FullFreeze( Actor whom )
	{
		if ( !whom || !whom.player )
		{
			for ( int i=0; i<MAXPLAYERS; i++ )
			{
				if ( !playeringame[i] ) continue;
				players[i].cheats |= CF_TOTALLYFROZEN;
				players[i].vel *= 0;
				players[i].mo.vel *= 0;
			}
			return;
		}
		whom.player.cheats |= CF_TOTALLYFROZEN;
		whom.player.vel *= 0;
		whom.vel *= 0;
	}
	static void FullUnfreeze( Actor whom )
	{
		if ( !whom || !whom.player )
		{
			for ( int i=0; i<MAXPLAYERS; i++ )
			{
				if ( !playeringame[i] ) continue;
				players[i].cheats &= ~CF_TOTALLYFROZEN;
			}
			return;
		}
		whom.player.cheats &= ~CF_TOTALLYFROZEN;
	}
}
