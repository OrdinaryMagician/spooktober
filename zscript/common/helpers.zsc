// Useful shared code
Class SpooktoberUtil abstract play
{
	// sets a lineid's light level (ACS doesn't have a function for this)
	static void SetLineLight( int tag, int brightness, bool absolute = false )
	{
		let l = LineIdIterator.Create(tag);
		int i;
		while ( (i = l.Next()) != -1 )
		{
			for ( int j=0; j<2; j++ )
			{
				if ( !level.lines[i].sidedef[j] ) continue;
				level.lines[i].sidedef[0].light = brightness;
				if ( absolute ) level.lines[i].sidedef[0].flags |= Side.WALLF_ABSLIGHTING;
				else level.lines[i].sidedef[0].flags &= ~Side.WALLF_ABSLIGHTING;
			}
		}
	}

	static void SetSectorPlaneLight( int tag, int part, int brightness )
	{
		let s = SectorTagIterator.Create(tag);
		int i;
		while ( (i = s.Next()) != -1 )
			level.sectors[i].SetPlaneLight(part,brightness);
	}

	// door transition teleport for hub
	static void DoorMove( Actor whom, int angle )
	{
		if ( !whom ) return;
		Vector2 movedir = Actor.RotateVector((128,0),angle);
		whom.SetOrigin(whom.Vec3Offset(movedir.x,movedir.y,0),false);
		whom.angle = angle;
		whom.pitch = 0;
	}

	// adds totallyfrozen and nogravity, clears velocity
	static void FullFreeze( Actor whom )
	{
		if ( !whom || !whom.player )
		{
			for ( int i=0; i<MAXPLAYERS; i++ )
			{
				if ( !playeringame[i] ) continue;
				players[i].cheats |= CF_TOTALLYFROZEN;
				players[i].vel *= 0;
				players[i].mo.vel *= 0;
				players[i].mo.PlayIdle();
			}
			return;
		}
		whom.player.cheats |= CF_TOTALLYFROZEN;
		whom.player.vel *= 0;
		whom.vel *= 0;
		PlayerPawn(whom).PlayIdle();
	}

	// removes totallyfrozen and nogravity
	static void FullUnfreeze( Actor whom )
	{
		if ( !whom || !whom.player )
		{
			for ( int i=0; i<MAXPLAYERS; i++ )
			{
				if ( !playeringame[i] ) continue;
				players[i].cheats &= ~CF_TOTALLYFROZEN;
			}
			return;
		}
		whom.player.cheats &= ~CF_TOTALLYFROZEN;
	}

	// gives a player their start items
	// replicates APlayerPawn::GiveDefaultInventory since it's not exported
	static void GiveStartItems( Actor mo )
	{
		if ( !(mo is 'PlayerPawn') ) return;
		DropItem di;
		for ( di=mo.GetDropItems(); di; di=di.Next )
		{
			Class<Actor> ti = di.Name;
			if ( !(ti is 'Inventory') )
			{
				Console.Printf(Font.TEXTCOLOR_ORANGE.."%s is not an inventory item and cannot be given to a player as start item.",ti.GetClassName());
				continue;
			}
			Inventory itm = mo.FindInventory((Class<Inventory>)(ti));
			if ( !itm )
			{
				itm = Inventory(Actor.Spawn(ti));
				itm.bIGNORESKILL = true;
				itm.Amount = di.Amount;
				if ( itm is 'Weapon' ) Weapon(itm).AmmoGive1 = Weapon(itm).AmmoGive2 = 0;
				Actor check;
				bool res;
				[res, check] = itm.CallTryPickup(mo);
				if ( !res )
				{
					if ( check != mo )
						ThrowAbortException("Cannot give morph items when starting a game");
					itm.Destroy();
					itm = null;
				}
			}
			else
			{
				let def = GetDefaultByType((Class<Inventory>)(ti));
				itm.Amount = clamp(itm.Amount+(di.Amount?di.Amount:def.Amount),0,itm.MaxAmount);
			}
			if ( itm && (itm is 'Weapon') && Weapon(itm).CheckAmmo(Weapon.EitherFire,false) )
				mo.player.pendingweapon = Weapon(itm);	// setting also readyweapon like in the C++ version seems to make the weapon break
		}
	}
}
